? .gitignore
? gnu/lib/libstdc++-v3/c++config.h
? gnu/lib/libstdc++-v3/gthr-default.h
? gnu/lib/libstdc++-v3/gthr-posix.h
? gnu/lib/libstdc++-v3/gthr-single.h
? gnu/lib/libstdc++-v3/gthr-tpf.h
? gnu/lib/libstdc++-v3/gthr.h
? gnu/usr.bin/cc/include/mm_malloc.h
? gnu/usr.bin/cc/include/unwind.h
? lib/libc/.ldadd
? lib/libc/Ovfork.d
? lib/libc/Ovfork.po
? lib/libc/Symbols.map
? lib/libc/_CurrentRuneLocale.d
? lib/libc/_CurrentRuneLocale.po
? lib/libc/_Exit.d
? lib/libc/_Exit.po
? lib/libc/___getcwd.d
? lib/libc/___getcwd.po
? lib/libc/___realpath.d
? lib/libc/___realpath.po
? lib/libc/___runetype_mb.d
? lib/libc/___runetype_mb.po
? lib/libc/__get_tcb.d
? lib/libc/__get_tcb.po
? lib/libc/__mb_cur_max.d
? lib/libc/__mb_cur_max.po
? lib/libc/__semctl.d
? lib/libc/__semctl.po
? lib/libc/__set_tcb.d
? lib/libc/__set_tcb.po
? lib/libc/__syscall.d
? lib/libc/__syscall.po
? lib/libc/__threxit.d
? lib/libc/__threxit.po
? lib/libc/__thrsigdivert.d
? lib/libc/__thrsigdivert.po
? lib/libc/__thrsleep.d
? lib/libc/__thrsleep.po
? lib/libc/__thrwakeup.d
? lib/libc/__thrwakeup.po
? lib/libc/_atomic_lock.d
? lib/libc/_atomic_lock.po
? lib/libc/_def_messages.d
? lib/libc/_def_messages.po
? lib/libc/_def_monetary.d
? lib/libc/_def_monetary.po
? lib/libc/_def_numeric.d
? lib/libc/_def_numeric.po
? lib/libc/_def_time.d
? lib/libc/_def_time.po
? lib/libc/_exit.d
? lib/libc/_exit.po
? lib/libc/_get_locname.d
? lib/libc/_get_locname.po
? lib/libc/_ptrace.d
? lib/libc/_ptrace.po
? lib/libc/_rand48.d
? lib/libc/_rand48.po
? lib/libc/_setjmp.d
? lib/libc/_setjmp.po
? lib/libc/_wctrans.d
? lib/libc/_wctrans.po
? lib/libc/_yp_check.d
? lib/libc/_yp_check.po
? lib/libc/a64l.d
? lib/libc/a64l.po
? lib/libc/abort.d
? lib/libc/abort.po
? lib/libc/abs.d
? lib/libc/abs.po
? lib/libc/accept.d
? lib/libc/accept.po
? lib/libc/accept4.d
? lib/libc/accept4.po
? lib/libc/access.d
? lib/libc/access.po
? lib/libc/acct.d
? lib/libc/acct.po
? lib/libc/adjfreq.d
? lib/libc/adjfreq.po
? lib/libc/adjtime.d
? lib/libc/adjtime.po
? lib/libc/alarm.d
? lib/libc/alarm.po
? lib/libc/arc4random.d
? lib/libc/arc4random.po
? lib/libc/arc4random_uniform.d
? lib/libc/arc4random_uniform.po
? lib/libc/asctime.d
? lib/libc/asctime.po
? lib/libc/asprintf.d
? lib/libc/asprintf.po
? lib/libc/asr.d
? lib/libc/asr.po
? lib/libc/asr_debug.d
? lib/libc/asr_debug.po
? lib/libc/asr_utils.d
? lib/libc/asr_utils.po
? lib/libc/assert.d
? lib/libc/assert.po
? lib/libc/atexit.d
? lib/libc/atexit.po
? lib/libc/atfork.d
? lib/libc/atfork.po
? lib/libc/atof.d
? lib/libc/atof.po
? lib/libc/atoi.d
? lib/libc/atoi.po
? lib/libc/atol.d
? lib/libc/atol.po
? lib/libc/atoll.d
? lib/libc/atoll.po
? lib/libc/auth_none.d
? lib/libc/auth_none.po
? lib/libc/auth_subr.d
? lib/libc/auth_subr.po
? lib/libc/auth_unix.d
? lib/libc/auth_unix.po
? lib/libc/authenticate.d
? lib/libc/authenticate.po
? lib/libc/authunix_prot.d
? lib/libc/authunix_prot.po
? lib/libc/base64.d
? lib/libc/base64.po
? lib/libc/basename.d
? lib/libc/basename.po
? lib/libc/bcmp.d
? lib/libc/bcmp.po
? lib/libc/bcrypt.d
? lib/libc/bcrypt.po
? lib/libc/bind.d
? lib/libc/bind.po
? lib/libc/bindresvport.d
? lib/libc/bindresvport.po
? lib/libc/blowfish.d
? lib/libc/blowfish.po
? lib/libc/brk.d
? lib/libc/brk.po
? lib/libc/bsearch.d
? lib/libc/bsearch.po
? lib/libc/bt_close.d
? lib/libc/bt_close.po
? lib/libc/bt_conv.d
? lib/libc/bt_conv.po
? lib/libc/bt_debug.d
? lib/libc/bt_debug.po
? lib/libc/bt_delete.d
? lib/libc/bt_delete.po
? lib/libc/bt_get.d
? lib/libc/bt_get.po
? lib/libc/bt_open.d
? lib/libc/bt_open.po
? lib/libc/bt_overflow.d
? lib/libc/bt_overflow.po
? lib/libc/bt_page.d
? lib/libc/bt_page.po
? lib/libc/bt_put.d
? lib/libc/bt_put.po
? lib/libc/bt_search.d
? lib/libc/bt_search.po
? lib/libc/bt_seq.d
? lib/libc/bt_seq.po
? lib/libc/bt_split.d
? lib/libc/bt_split.po
? lib/libc/bt_utils.d
? lib/libc/bt_utils.po
? lib/libc/btowc.d
? lib/libc/btowc.po
? lib/libc/bzero.d
? lib/libc/bzero.po
? lib/libc/callbacks.d
? lib/libc/callbacks.po
? lib/libc/canceled.d
? lib/libc/canceled.po
? lib/libc/catclose.d
? lib/libc/catclose.po
? lib/libc/catgets.d
? lib/libc/catgets.po
? lib/libc/catopen.d
? lib/libc/catopen.po
? lib/libc/cfgetispeed.d
? lib/libc/cfgetispeed.po
? lib/libc/cfgetospeed.d
? lib/libc/cfgetospeed.po
? lib/libc/cfmakeraw.d
? lib/libc/cfmakeraw.po
? lib/libc/cfsetispeed.d
? lib/libc/cfsetispeed.po
? lib/libc/cfsetospeed.d
? lib/libc/cfsetospeed.po
? lib/libc/cfsetspeed.d
? lib/libc/cfsetspeed.po
? lib/libc/chdir.d
? lib/libc/chdir.po
? lib/libc/chflags.d
? lib/libc/chflags.po
? lib/libc/chflagsat.d
? lib/libc/chflagsat.po
? lib/libc/chmod.d
? lib/libc/chmod.po
? lib/libc/chown.d
? lib/libc/chown.po
? lib/libc/chroot.d
? lib/libc/chroot.po
? lib/libc/citrus_none.d
? lib/libc/citrus_none.po
? lib/libc/citrus_utf8.d
? lib/libc/citrus_utf8.po
? lib/libc/clnt_generic.d
? lib/libc/clnt_generic.po
? lib/libc/clnt_perror.d
? lib/libc/clnt_perror.po
? lib/libc/clnt_raw.d
? lib/libc/clnt_raw.po
? lib/libc/clnt_simple.d
? lib/libc/clnt_simple.po
? lib/libc/clnt_tcp.d
? lib/libc/clnt_tcp.po
? lib/libc/clnt_udp.d
? lib/libc/clnt_udp.po
? lib/libc/clock.d
? lib/libc/clock.po
? lib/libc/clock_getcpuclockid.d
? lib/libc/clock_getcpuclockid.po
? lib/libc/clock_getres.d
? lib/libc/clock_getres.po
? lib/libc/clock_gettime.d
? lib/libc/clock_gettime.po
? lib/libc/clock_settime.d
? lib/libc/clock_settime.po
? lib/libc/close.d
? lib/libc/close.po
? lib/libc/closedir.d
? lib/libc/closedir.po
? lib/libc/closefrom.d
? lib/libc/closefrom.po
? lib/libc/clrerr.d
? lib/libc/clrerr.po
? lib/libc/confstr.d
? lib/libc/confstr.po
? lib/libc/connect.d
? lib/libc/connect.po
? lib/libc/creat.d
? lib/libc/creat.po
? lib/libc/crypt.d
? lib/libc/crypt.po
? lib/libc/cryptutil.d
? lib/libc/cryptutil.po
? lib/libc/ctermid.d
? lib/libc/ctermid.po
? lib/libc/ctype_.d
? lib/libc/ctype_.po
? lib/libc/daemon.d
? lib/libc/daemon.po
? lib/libc/db.d
? lib/libc/db.po
? lib/libc/devname.d
? lib/libc/devname.po
? lib/libc/difftime.d
? lib/libc/difftime.po
? lib/libc/dirfd.d
? lib/libc/dirfd.po
? lib/libc/dirname.d
? lib/libc/dirname.po
? lib/libc/disklabel.d
? lib/libc/disklabel.po
? lib/libc/div.d
? lib/libc/div.po
? lib/libc/dlfcn_stubs.d
? lib/libc/dlfcn_stubs.po
? lib/libc/dmisc.d
? lib/libc/dmisc.po
? lib/libc/dprintf.d
? lib/libc/dprintf.po
? lib/libc/drand48.d
? lib/libc/drand48.po
? lib/libc/dtoa.d
? lib/libc/dtoa.po
? lib/libc/dup.d
? lib/libc/dup.po
? lib/libc/dup2.d
? lib/libc/dup2.po
? lib/libc/dup3.d
? lib/libc/dup3.po
? lib/libc/duplocale.d
? lib/libc/duplocale.po
? lib/libc/ecvt.d
? lib/libc/ecvt.po
? lib/libc/erand48.d
? lib/libc/erand48.po
? lib/libc/err.d
? lib/libc/err.po
? lib/libc/errc.d
? lib/libc/errc.po
? lib/libc/errlist.d
? lib/libc/errlist.po
? lib/libc/errno.d
? lib/libc/errno.po
? lib/libc/errx.d
? lib/libc/errx.po
? lib/libc/ethers.d
? lib/libc/ethers.po
? lib/libc/exec.d
? lib/libc/exec.po
? lib/libc/execve.d
? lib/libc/execve.po
? lib/libc/exit.d
? lib/libc/exit.po
? lib/libc/explicit_bzero.d
? lib/libc/explicit_bzero.po
? lib/libc/fabs.d
? lib/libc/fabs.po
? lib/libc/faccessat.d
? lib/libc/faccessat.po
? lib/libc/fchdir.d
? lib/libc/fchdir.po
? lib/libc/fchflags.d
? lib/libc/fchflags.po
? lib/libc/fchmod.d
? lib/libc/fchmod.po
? lib/libc/fchmodat.d
? lib/libc/fchmodat.po
? lib/libc/fchown.d
? lib/libc/fchown.po
? lib/libc/fchownat.d
? lib/libc/fchownat.po
? lib/libc/fclose.d
? lib/libc/fclose.po
? lib/libc/fcntl.d
? lib/libc/fcntl.po
? lib/libc/fdatasync.d
? lib/libc/fdatasync.po
? lib/libc/fdopen.d
? lib/libc/fdopen.po
? lib/libc/feof.d
? lib/libc/feof.po
? lib/libc/ferror.d
? lib/libc/ferror.po
? lib/libc/fflush.d
? lib/libc/fflush.po
? lib/libc/ffs.d
? lib/libc/ffs.po
? lib/libc/fgetc.d
? lib/libc/fgetc.po
? lib/libc/fgetln.d
? lib/libc/fgetln.po
? lib/libc/fgetpos.d
? lib/libc/fgetpos.po
? lib/libc/fgets.d
? lib/libc/fgets.po
? lib/libc/fgetwc.d
? lib/libc/fgetwc.po
? lib/libc/fgetwln.d
? lib/libc/fgetwln.po
? lib/libc/fgetws.d
? lib/libc/fgetws.po
? lib/libc/fhopen.d
? lib/libc/fhopen.po
? lib/libc/fhstat.d
? lib/libc/fhstat.po
? lib/libc/fhstatfs.d
? lib/libc/fhstatfs.po
? lib/libc/fileno.d
? lib/libc/fileno.po
? lib/libc/findfp.d
? lib/libc/findfp.po
? lib/libc/flags.d
? lib/libc/flags.po
? lib/libc/flock.d
? lib/libc/flock.po
? lib/libc/flockfile.d
? lib/libc/flockfile.po
? lib/libc/flt_rounds.d
? lib/libc/flt_rounds.po
? lib/libc/fmemopen.d
? lib/libc/fmemopen.po
? lib/libc/fnmatch.d
? lib/libc/fnmatch.po
? lib/libc/fopen.d
? lib/libc/fopen.po
? lib/libc/fork.d
? lib/libc/fork.po
? lib/libc/fpathconf.d
? lib/libc/fpathconf.po
? lib/libc/fpclassify.d
? lib/libc/fpclassify.po
? lib/libc/fpclassifyl.d
? lib/libc/fpclassifyl.po
? lib/libc/fpgetmask.d
? lib/libc/fpgetmask.po
? lib/libc/fpgetround.d
? lib/libc/fpgetround.po
? lib/libc/fpgetsticky.d
? lib/libc/fpgetsticky.po
? lib/libc/fprintf.d
? lib/libc/fprintf.po
? lib/libc/fpsetmask.d
? lib/libc/fpsetmask.po
? lib/libc/fpsetround.d
? lib/libc/fpsetround.po
? lib/libc/fpsetsticky.d
? lib/libc/fpsetsticky.po
? lib/libc/fpurge.d
? lib/libc/fpurge.po
? lib/libc/fputc.d
? lib/libc/fputc.po
? lib/libc/fputs.d
? lib/libc/fputs.po
? lib/libc/fputwc.d
? lib/libc/fputwc.po
? lib/libc/fputws.d
? lib/libc/fputws.po
? lib/libc/fread.d
? lib/libc/fread.po
? lib/libc/freeaddrinfo.d
? lib/libc/freeaddrinfo.po
? lib/libc/freelocale.d
? lib/libc/freelocale.po
? lib/libc/freopen.d
? lib/libc/freopen.po
? lib/libc/frexp.d
? lib/libc/frexp.po
? lib/libc/fscanf.d
? lib/libc/fscanf.po
? lib/libc/fseek.d
? lib/libc/fseek.po
? lib/libc/fsetpos.d
? lib/libc/fsetpos.po
? lib/libc/fstab.d
? lib/libc/fstab.po
? lib/libc/fstat.d
? lib/libc/fstat.po
? lib/libc/fstatat.d
? lib/libc/fstatat.po
? lib/libc/fstatfs.d
? lib/libc/fstatfs.po
? lib/libc/fsync.d
? lib/libc/fsync.po
? lib/libc/ftell.d
? lib/libc/ftell.po
? lib/libc/ftok.d
? lib/libc/ftok.po
? lib/libc/ftruncate.d
? lib/libc/ftruncate.po
? lib/libc/fts.d
? lib/libc/fts.po
? lib/libc/ftw.d
? lib/libc/ftw.po
? lib/libc/funopen.d
? lib/libc/funopen.po
? lib/libc/futex.d
? lib/libc/futex.po
? lib/libc/futimens.d
? lib/libc/futimens.po
? lib/libc/futimes.d
? lib/libc/futimes.po
? lib/libc/fvwrite.d
? lib/libc/fvwrite.po
? lib/libc/fwalk.d
? lib/libc/fwalk.po
? lib/libc/fwide.d
? lib/libc/fwide.po
? lib/libc/fwprintf.d
? lib/libc/fwprintf.po
? lib/libc/fwrite.d
? lib/libc/fwrite.po
? lib/libc/fwscanf.d
? lib/libc/fwscanf.po
? lib/libc/gai_strerror.d
? lib/libc/gai_strerror.po
? lib/libc/gcvt.d
? lib/libc/gcvt.po
? lib/libc/gdtoa.d
? lib/libc/gdtoa.po
? lib/libc/get_myaddress.d
? lib/libc/get_myaddress.po
? lib/libc/getaddrinfo.d
? lib/libc/getaddrinfo.po
? lib/libc/getaddrinfo_async.d
? lib/libc/getaddrinfo_async.po
? lib/libc/getbsize.d
? lib/libc/getbsize.po
? lib/libc/getc.d
? lib/libc/getc.po
? lib/libc/getcap.d
? lib/libc/getcap.po
? lib/libc/getchar.d
? lib/libc/getchar.po
? lib/libc/getcwd.d
? lib/libc/getcwd.po
? lib/libc/getdelim.d
? lib/libc/getdelim.po
? lib/libc/getdents.d
? lib/libc/getdents.po
? lib/libc/getdomainname.d
? lib/libc/getdomainname.po
? lib/libc/getdtablecount.d
? lib/libc/getdtablecount.po
? lib/libc/getdtablesize.d
? lib/libc/getdtablesize.po
? lib/libc/getegid.d
? lib/libc/getegid.po
? lib/libc/getentropy.d
? lib/libc/getentropy.po
? lib/libc/getenv.d
? lib/libc/getenv.po
? lib/libc/geteuid.d
? lib/libc/geteuid.po
? lib/libc/getfh.d
? lib/libc/getfh.po
? lib/libc/getfsstat.d
? lib/libc/getfsstat.po
? lib/libc/getgid.d
? lib/libc/getgid.po
? lib/libc/getgrent.d
? lib/libc/getgrent.po
? lib/libc/getgrouplist.d
? lib/libc/getgrouplist.po
? lib/libc/getgroups.d
? lib/libc/getgroups.po
? lib/libc/gethex.d
? lib/libc/gethex.po
? lib/libc/gethostid.d
? lib/libc/gethostid.po
? lib/libc/gethostnamadr.d
? lib/libc/gethostnamadr.po
? lib/libc/gethostnamadr_async.d
? lib/libc/gethostnamadr_async.po
? lib/libc/gethostname.d
? lib/libc/gethostname.po
? lib/libc/getifaddrs.d
? lib/libc/getifaddrs.po
? lib/libc/getitimer.d
? lib/libc/getitimer.po
? lib/libc/getline.d
? lib/libc/getline.po
? lib/libc/getloadavg.d
? lib/libc/getloadavg.po
? lib/libc/getlogin.d
? lib/libc/getlogin.po
? lib/libc/getlogin_r.d
? lib/libc/getlogin_r.po
? lib/libc/getmntinfo.d
? lib/libc/getmntinfo.po
? lib/libc/getnameinfo.d
? lib/libc/getnameinfo.po
? lib/libc/getnameinfo_async.d
? lib/libc/getnameinfo_async.po
? lib/libc/getnetent.d
? lib/libc/getnetent.po
? lib/libc/getnetgrent.d
? lib/libc/getnetgrent.po
? lib/libc/getnetnamadr.d
? lib/libc/getnetnamadr.po
? lib/libc/getnetnamadr_async.d
? lib/libc/getnetnamadr_async.po
? lib/libc/getopt_long.d
? lib/libc/getopt_long.po
? lib/libc/getpagesize.d
? lib/libc/getpagesize.po
? lib/libc/getpeereid.d
? lib/libc/getpeereid.po
? lib/libc/getpeername.d
? lib/libc/getpeername.po
? lib/libc/getpgid.d
? lib/libc/getpgid.po
? lib/libc/getpgrp.d
? lib/libc/getpgrp.po
? lib/libc/getpid.d
? lib/libc/getpid.po
? lib/libc/getppid.d
? lib/libc/getppid.po
? lib/libc/getpriority.d
? lib/libc/getpriority.po
? lib/libc/getprogname.d
? lib/libc/getprogname.po
? lib/libc/getproto.d
? lib/libc/getproto.po
? lib/libc/getprotoent.d
? lib/libc/getprotoent.po
? lib/libc/getprotoname.d
? lib/libc/getprotoname.po
? lib/libc/getpwent.d
? lib/libc/getpwent.po
? lib/libc/getresgid.d
? lib/libc/getresgid.po
? lib/libc/getresuid.d
? lib/libc/getresuid.po
? lib/libc/getrlimit.d
? lib/libc/getrlimit.po
? lib/libc/getrpcent.d
? lib/libc/getrpcent.po
? lib/libc/getrpcport.d
? lib/libc/getrpcport.po
? lib/libc/getrrsetbyname.d
? lib/libc/getrrsetbyname.po
? lib/libc/getrrsetbyname_async.d
? lib/libc/getrrsetbyname_async.po
? lib/libc/getrtable.d
? lib/libc/getrtable.po
? lib/libc/getrusage.d
? lib/libc/getrusage.po
? lib/libc/getservbyname.d
? lib/libc/getservbyname.po
? lib/libc/getservbyport.d
? lib/libc/getservbyport.po
? lib/libc/getservent.d
? lib/libc/getservent.po
? lib/libc/getsid.d
? lib/libc/getsid.po
? lib/libc/getsockname.d
? lib/libc/getsockname.po
? lib/libc/getsockopt.d
? lib/libc/getsockopt.po
? lib/libc/getsubopt.d
? lib/libc/getsubopt.po
? lib/libc/getthrid.d
? lib/libc/getthrid.po
? lib/libc/gettimeofday.d
? lib/libc/gettimeofday.po
? lib/libc/getttyent.d
? lib/libc/getttyent.po
? lib/libc/getuid.d
? lib/libc/getuid.po
? lib/libc/getusershell.d
? lib/libc/getusershell.po
? lib/libc/getw.d
? lib/libc/getw.po
? lib/libc/getwc.d
? lib/libc/getwc.po
? lib/libc/getwchar.d
? lib/libc/getwchar.po
? lib/libc/getwd.d
? lib/libc/getwd.po
? lib/libc/glob.d
? lib/libc/glob.po
? lib/libc/gmisc.d
? lib/libc/gmisc.po
? lib/libc/gmon.d
? lib/libc/gmon.po
? lib/libc/hash.d
? lib/libc/hash.po
? lib/libc/hash_bigkey.d
? lib/libc/hash_bigkey.po
? lib/libc/hash_buf.d
? lib/libc/hash_buf.po
? lib/libc/hash_func.d
? lib/libc/hash_func.po
? lib/libc/hash_log2.d
? lib/libc/hash_log2.po
? lib/libc/hash_page.d
? lib/libc/hash_page.po
? lib/libc/hcreate.d
? lib/libc/hcreate.po
? lib/libc/hd_init.d
? lib/libc/hd_init.po
? lib/libc/hdtoa.d
? lib/libc/hdtoa.po
? lib/libc/heapsort.d
? lib/libc/heapsort.po
? lib/libc/herror.d
? lib/libc/herror.po
? lib/libc/hexnan.d
? lib/libc/hexnan.po
? lib/libc/htonl.d
? lib/libc/htonl.po
? lib/libc/htons.d
? lib/libc/htons.po
? lib/libc/icdb.d
? lib/libc/icdb.po
? lib/libc/if_indextoname.d
? lib/libc/if_indextoname.po
? lib/libc/if_nameindex.d
? lib/libc/if_nameindex.po
? lib/libc/if_nametoindex.d
? lib/libc/if_nametoindex.po
? lib/libc/imaxabs.d
? lib/libc/imaxabs.po
? lib/libc/imaxdiv.d
? lib/libc/imaxdiv.po
? lib/libc/inet_addr.d
? lib/libc/inet_addr.po
? lib/libc/inet_lnaof.d
? lib/libc/inet_lnaof.po
? lib/libc/inet_makeaddr.d
? lib/libc/inet_makeaddr.po
? lib/libc/inet_net_ntop.d
? lib/libc/inet_net_ntop.po
? lib/libc/inet_net_pton.d
? lib/libc/inet_net_pton.po
? lib/libc/inet_neta.d
? lib/libc/inet_neta.po
? lib/libc/inet_netof.d
? lib/libc/inet_netof.po
? lib/libc/inet_network.d
? lib/libc/inet_network.po
? lib/libc/inet_ntoa.d
? lib/libc/inet_ntoa.po
? lib/libc/inet_ntop.d
? lib/libc/inet_ntop.po
? lib/libc/inet_pton.d
? lib/libc/inet_pton.po
? lib/libc/infinity.d
? lib/libc/infinity.po
? lib/libc/init.d
? lib/libc/init.po
? lib/libc/initgroups.d
? lib/libc/initgroups.po
? lib/libc/insque.d
? lib/libc/insque.po
? lib/libc/ioctl.d
? lib/libc/ioctl.po
? lib/libc/ip6opt.d
? lib/libc/ip6opt.po
? lib/libc/isatty.d
? lib/libc/isatty.po
? lib/libc/isctype.d
? lib/libc/isctype.po
? lib/libc/isctype_l.d
? lib/libc/isctype_l.po
? lib/libc/isfdtype.d
? lib/libc/isfdtype.po
? lib/libc/isfinite.d
? lib/libc/isfinite.po
? lib/libc/isfinitel.d
? lib/libc/isfinitel.po
? lib/libc/isinf.d
? lib/libc/isinf.po
? lib/libc/isinfl.d
? lib/libc/isinfl.po
? lib/libc/isnan.d
? lib/libc/isnan.po
? lib/libc/isnanl.d
? lib/libc/isnanl.po
? lib/libc/isnormal.d
? lib/libc/isnormal.po
? lib/libc/isnormall.d
? lib/libc/isnormall.po
? lib/libc/issetugid.d
? lib/libc/issetugid.po
? lib/libc/iswctype.d
? lib/libc/iswctype.po
? lib/libc/iswctype_l.d
? lib/libc/iswctype_l.po
? lib/libc/jrand48.d
? lib/libc/jrand48.po
? lib/libc/kevent.d
? lib/libc/kevent.po
? lib/libc/kill.d
? lib/libc/kill.po
? lib/libc/killpg.d
? lib/libc/killpg.po
? lib/libc/kqueue.d
? lib/libc/kqueue.po
? lib/libc/ktrace.d
? lib/libc/ktrace.po
? lib/libc/l64a.d
? lib/libc/l64a.po
? lib/libc/labs.d
? lib/libc/labs.po
? lib/libc/lchown.d
? lib/libc/lchown.po
? lib/libc/lcong48.d
? lib/libc/lcong48.po
? lib/libc/ldexp.d
? lib/libc/ldexp.po
? lib/libc/ldiv.d
? lib/libc/ldiv.po
? lib/libc/ldtoa.d
? lib/libc/ldtoa.po
? lib/libc/libc.so.96.0
? lib/libc/link.d
? lib/libc/link.po
? lib/libc/linkaddr.d
? lib/libc/linkaddr.po
? lib/libc/linkat.d
? lib/libc/linkat.po
? lib/libc/listen.d
? lib/libc/listen.po
? lib/libc/llabs.d
? lib/libc/llabs.po
? lib/libc/lldiv.d
? lib/libc/lldiv.po
? lib/libc/localeconv.d
? lib/libc/localeconv.po
? lib/libc/localtime.d
? lib/libc/localtime.po
? lib/libc/lockf.d
? lib/libc/lockf.po
? lib/libc/login_cap.d
? lib/libc/login_cap.po
? lib/libc/lrand48.d
? lib/libc/lrand48.po
? lib/libc/lsearch.d
? lib/libc/lsearch.po
? lib/libc/lseek.d
? lib/libc/lseek.po
? lib/libc/lstat.d
? lib/libc/lstat.po
? lib/libc/madvise.d
? lib/libc/madvise.po
? lib/libc/makebuf.d
? lib/libc/makebuf.po
? lib/libc/malloc.d
? lib/libc/malloc.po
? lib/libc/mblen.d
? lib/libc/mblen.po
? lib/libc/mbrlen.d
? lib/libc/mbrlen.po
? lib/libc/mbstowcs.d
? lib/libc/mbstowcs.po
? lib/libc/mbtowc.d
? lib/libc/mbtowc.po
? lib/libc/mcount.d
? lib/libc/mcount.po
? lib/libc/md5.d
? lib/libc/md5.po
? lib/libc/md5hl.c
? lib/libc/md5hl.d
? lib/libc/md5hl.po
? lib/libc/memccpy.d
? lib/libc/memccpy.po
? lib/libc/memchr.d
? lib/libc/memchr.po
? lib/libc/memcmp.d
? lib/libc/memcmp.po
? lib/libc/memcpy.d
? lib/libc/memcpy.po
? lib/libc/memmem.d
? lib/libc/memmem.po
? lib/libc/memmove.d
? lib/libc/memmove.po
? lib/libc/memrchr.d
? lib/libc/memrchr.po
? lib/libc/memset.d
? lib/libc/memset.po
? lib/libc/merge.d
? lib/libc/merge.po
? lib/libc/microtime.d
? lib/libc/microtime.po
? lib/libc/minherit.d
? lib/libc/minherit.po
? lib/libc/misc.d
? lib/libc/misc.po
? lib/libc/mkdir.d
? lib/libc/mkdir.po
? lib/libc/mkdirat.d
? lib/libc/mkdirat.po
? lib/libc/mkfifo.d
? lib/libc/mkfifo.po
? lib/libc/mkfifoat.d
? lib/libc/mkfifoat.po
? lib/libc/mknod.d
? lib/libc/mknod.po
? lib/libc/mknodat.d
? lib/libc/mknodat.po
? lib/libc/mktemp.d
? lib/libc/mktemp.po
? lib/libc/mlock.d
? lib/libc/mlock.po
? lib/libc/mlockall.d
? lib/libc/mlockall.po
? lib/libc/mmap.d
? lib/libc/mmap.po
? lib/libc/modf.d
? lib/libc/modf.po
? lib/libc/mount.d
? lib/libc/mount.po
? lib/libc/mpool.d
? lib/libc/mpool.po
? lib/libc/mprotect.d
? lib/libc/mprotect.po
? lib/libc/mquery.d
? lib/libc/mquery.po
? lib/libc/mrand48.d
? lib/libc/mrand48.po
? lib/libc/msgctl.d
? lib/libc/msgctl.po
? lib/libc/msgget.d
? lib/libc/msgget.po
? lib/libc/msgrcv.d
? lib/libc/msgrcv.po
? lib/libc/msgsnd.d
? lib/libc/msgsnd.po
? lib/libc/msync.d
? lib/libc/msync.po
? lib/libc/multibyte_citrus.d
? lib/libc/multibyte_citrus.po
? lib/libc/munlock.d
? lib/libc/munlock.po
? lib/libc/munlockall.d
? lib/libc/munlockall.po
? lib/libc/munmap.d
? lib/libc/munmap.po
? lib/libc/nan.d
? lib/libc/nan.po
? lib/libc/nanosleep.d
? lib/libc/nanosleep.po
? lib/libc/ndbm.d
? lib/libc/ndbm.po
? lib/libc/newlocale.d
? lib/libc/newlocale.po
? lib/libc/nfssvc.d
? lib/libc/nfssvc.po
? lib/libc/nftw.d
? lib/libc/nftw.po
? lib/libc/nice.d
? lib/libc/nice.po
? lib/libc/nl_langinfo.d
? lib/libc/nl_langinfo.po
? lib/libc/nl_langinfo_l.d
? lib/libc/nl_langinfo_l.po
? lib/libc/nlist.d
? lib/libc/nlist.po
? lib/libc/nrand48.d
? lib/libc/nrand48.po
? lib/libc/ntohl.d
? lib/libc/ntohl.po
? lib/libc/ntohs.d
? lib/libc/ntohs.po
? lib/libc/open.d
? lib/libc/open.po
? lib/libc/open_memstream.d
? lib/libc/open_memstream.po
? lib/libc/open_wmemstream.d
? lib/libc/open_wmemstream.po
? lib/libc/openat.d
? lib/libc/openat.po
? lib/libc/opendir.d
? lib/libc/opendir.po
? lib/libc/pathconf.d
? lib/libc/pathconf.po
? lib/libc/pause.d
? lib/libc/pause.po
? lib/libc/perror.d
? lib/libc/perror.po
? lib/libc/pfexecve.d
? lib/libc/pfexecve.po
? lib/libc/pipe.d
? lib/libc/pipe.po
? lib/libc/pipe2.d
? lib/libc/pipe2.po
? lib/libc/pledge.d
? lib/libc/pledge.po
? lib/libc/pmap_clnt.d
? lib/libc/pmap_clnt.po
? lib/libc/pmap_getmaps.d
? lib/libc/pmap_getmaps.po
? lib/libc/pmap_getport.d
? lib/libc/pmap_getport.po
? lib/libc/pmap_prot.d
? lib/libc/pmap_prot.po
? lib/libc/pmap_prot2.d
? lib/libc/pmap_prot2.po
? lib/libc/pmap_rmt.d
? lib/libc/pmap_rmt.po
? lib/libc/poll.d
? lib/libc/poll.po
? lib/libc/popen.d
? lib/libc/popen.po
? lib/libc/posix_madvise.d
? lib/libc/posix_madvise.po
? lib/libc/posix_pty.d
? lib/libc/posix_pty.po
? lib/libc/posix_spawn.d
? lib/libc/posix_spawn.po
? lib/libc/ppoll.d
? lib/libc/ppoll.po
? lib/libc/pread.d
? lib/libc/pread.po
? lib/libc/preadv.d
? lib/libc/preadv.po
? lib/libc/printf.d
? lib/libc/printf.po
? lib/libc/profil.d
? lib/libc/profil.po
? lib/libc/pselect.d
? lib/libc/pselect.po
? lib/libc/psignal.d
? lib/libc/psignal.po
? lib/libc/pthread_sigmask.d
? lib/libc/pthread_sigmask.po
? lib/libc/ptrace.d
? lib/libc/ptrace.po
? lib/libc/putc.d
? lib/libc/putc.po
? lib/libc/putchar.d
? lib/libc/putchar.po
? lib/libc/puts.d
? lib/libc/puts.po
? lib/libc/putw.d
? lib/libc/putw.po
? lib/libc/putwc.d
? lib/libc/putwc.po
? lib/libc/putwchar.d
? lib/libc/putwchar.po
? lib/libc/pw_dup.d
? lib/libc/pw_dup.po
? lib/libc/pwcache.d
? lib/libc/pwcache.po
? lib/libc/pwrite.d
? lib/libc/pwrite.po
? lib/libc/pwritev.d
? lib/libc/pwritev.po
? lib/libc/qsort.d
? lib/libc/qsort.po
? lib/libc/quotactl.d
? lib/libc/quotactl.po
? lib/libc/radixsort.d
? lib/libc/radixsort.po
? lib/libc/raise.d
? lib/libc/raise.po
? lib/libc/rand.d
? lib/libc/rand.po
? lib/libc/random.d
? lib/libc/random.po
? lib/libc/rcmd.d
? lib/libc/rcmd.po
? lib/libc/rcmdsh.d
? lib/libc/rcmdsh.po
? lib/libc/read.d
? lib/libc/read.po
? lib/libc/readdir.d
? lib/libc/readdir.po
? lib/libc/readdir_r.d
? lib/libc/readdir_r.po
? lib/libc/readlink.d
? lib/libc/readlink.po
? lib/libc/readlinkat.d
? lib/libc/readlinkat.po
? lib/libc/readpassphrase.d
? lib/libc/readpassphrase.po
? lib/libc/readv.d
? lib/libc/readv.po
? lib/libc/reallocarray.d
? lib/libc/reallocarray.po
? lib/libc/realpath.d
? lib/libc/realpath.po
? lib/libc/reboot.d
? lib/libc/reboot.po
? lib/libc/rec_close.d
? lib/libc/rec_close.po
? lib/libc/rec_delete.d
? lib/libc/rec_delete.po
? lib/libc/rec_get.d
? lib/libc/rec_get.po
? lib/libc/rec_open.d
? lib/libc/rec_open.po
? lib/libc/rec_put.d
? lib/libc/rec_put.po
? lib/libc/rec_search.d
? lib/libc/rec_search.po
? lib/libc/rec_seq.d
? lib/libc/rec_seq.po
? lib/libc/rec_utils.d
? lib/libc/rec_utils.po
? lib/libc/recv.d
? lib/libc/recv.po
? lib/libc/recvfrom.d
? lib/libc/recvfrom.po
? lib/libc/recvmsg.d
? lib/libc/recvmsg.po
? lib/libc/refill.d
? lib/libc/refill.po
? lib/libc/regcomp.d
? lib/libc/regcomp.po
? lib/libc/regerror.d
? lib/libc/regerror.po
? lib/libc/regexec.d
? lib/libc/regexec.po
? lib/libc/regfree.d
? lib/libc/regfree.po
? lib/libc/remove.d
? lib/libc/remove.po
? lib/libc/remque.d
? lib/libc/remque.po
? lib/libc/rename.d
? lib/libc/rename.po
? lib/libc/renameat.d
? lib/libc/renameat.po
? lib/libc/res_comp.d
? lib/libc/res_comp.po
? lib/libc/res_data.d
? lib/libc/res_data.po
? lib/libc/res_debug.d
? lib/libc/res_debug.po
? lib/libc/res_debug_syms.d
? lib/libc/res_debug_syms.po
? lib/libc/res_init.d
? lib/libc/res_init.po
? lib/libc/res_mkquery.d
? lib/libc/res_mkquery.po
? lib/libc/res_query.d
? lib/libc/res_query.po
? lib/libc/res_random.d
? lib/libc/res_random.po
? lib/libc/res_search_async.d
? lib/libc/res_search_async.po
? lib/libc/res_send.d
? lib/libc/res_send.po
? lib/libc/res_send_async.d
? lib/libc/res_send_async.po
? lib/libc/revoke.d
? lib/libc/revoke.po
? lib/libc/rewind.d
? lib/libc/rewind.po
? lib/libc/rewinddir.d
? lib/libc/rewinddir.po
? lib/libc/rget.d
? lib/libc/rget.po
? lib/libc/rmd160.d
? lib/libc/rmd160.po
? lib/libc/rmd160hl.c
? lib/libc/rmd160hl.d
? lib/libc/rmd160hl.po
? lib/libc/rmdir.d
? lib/libc/rmdir.po
? lib/libc/rpc_callmsg.d
? lib/libc/rpc_callmsg.po
? lib/libc/rpc_commondata.d
? lib/libc/rpc_commondata.po
? lib/libc/rpc_prot.d
? lib/libc/rpc_prot.po
? lib/libc/rresvport.d
? lib/libc/rresvport.po
? lib/libc/rthdr.d
? lib/libc/rthdr.po
? lib/libc/rthread.d
? lib/libc/rthread.po
? lib/libc/rthread_cond.d
? lib/libc/rthread_cond.po
? lib/libc/rthread_condattr.d
? lib/libc/rthread_condattr.po
? lib/libc/rthread_debug.d
? lib/libc/rthread_debug.po
? lib/libc/rthread_file.d
? lib/libc/rthread_file.po
? lib/libc/rthread_libc.d
? lib/libc/rthread_libc.po
? lib/libc/rthread_mutex.d
? lib/libc/rthread_mutex.po
? lib/libc/rthread_once.d
? lib/libc/rthread_once.po
? lib/libc/rthread_tls.d
? lib/libc/rthread_tls.po
? lib/libc/rune.d
? lib/libc/rune.po
? lib/libc/runeglue.d
? lib/libc/runeglue.po
? lib/libc/runetable.d
? lib/libc/runetable.po
? lib/libc/ruserok.d
? lib/libc/ruserok.po
? lib/libc/sbrk.d
? lib/libc/sbrk.po
? lib/libc/scandir.d
? lib/libc/scandir.po
? lib/libc/scanf.d
? lib/libc/scanf.po
? lib/libc/sched_yield.d
? lib/libc/sched_yield.po
? lib/libc/seed48.d
? lib/libc/seed48.po
? lib/libc/seekdir.d
? lib/libc/seekdir.po
? lib/libc/select.d
? lib/libc/select.po
? lib/libc/semctl.d
? lib/libc/semctl.po
? lib/libc/semget.d
? lib/libc/semget.po
? lib/libc/semop.d
? lib/libc/semop.po
? lib/libc/send.d
? lib/libc/send.po
? lib/libc/sendmsg.d
? lib/libc/sendmsg.po
? lib/libc/sendsyslog.d
? lib/libc/sendsyslog.po
? lib/libc/sendto.d
? lib/libc/sendto.po
? lib/libc/setbuf.d
? lib/libc/setbuf.po
? lib/libc/setbuffer.d
? lib/libc/setbuffer.po
? lib/libc/setdomainname.d
? lib/libc/setdomainname.po
? lib/libc/setegid.d
? lib/libc/setegid.po
? lib/libc/setenv.d
? lib/libc/setenv.po
? lib/libc/seteuid.d
? lib/libc/seteuid.po
? lib/libc/setgid.d
? lib/libc/setgid.po
? lib/libc/setgroups.d
? lib/libc/setgroups.po
? lib/libc/sethostent.d
? lib/libc/sethostent.po
? lib/libc/sethostid.d
? lib/libc/sethostid.po
? lib/libc/sethostname.d
? lib/libc/sethostname.po
? lib/libc/setitimer.d
? lib/libc/setitimer.po
? lib/libc/setjmp.d
? lib/libc/setjmp.po
? lib/libc/setlocale.d
? lib/libc/setlocale.po
? lib/libc/setlogin.d
? lib/libc/setlogin.po
? lib/libc/setmode.d
? lib/libc/setmode.po
? lib/libc/setpgid.d
? lib/libc/setpgid.po
? lib/libc/setpgrp.d
? lib/libc/setpgrp.po
? lib/libc/setpriority.d
? lib/libc/setpriority.po
? lib/libc/setproctitle.d
? lib/libc/setproctitle.po
? lib/libc/setprogname.d
? lib/libc/setprogname.po
? lib/libc/setregid.d
? lib/libc/setregid.po
? lib/libc/setresgid.d
? lib/libc/setresgid.po
? lib/libc/setresuid.d
? lib/libc/setresuid.po
? lib/libc/setreuid.d
? lib/libc/setreuid.po
? lib/libc/setrlimit.d
? lib/libc/setrlimit.po
? lib/libc/setrtable.d
? lib/libc/setrtable.po
? lib/libc/setsid.d
? lib/libc/setsid.po
? lib/libc/setsockopt.d
? lib/libc/setsockopt.po
? lib/libc/settimeofday.d
? lib/libc/settimeofday.po
? lib/libc/setuid.d
? lib/libc/setuid.po
? lib/libc/setvbuf.d
? lib/libc/setvbuf.po
? lib/libc/sha1.d
? lib/libc/sha1.po
? lib/libc/sha1hl.c
? lib/libc/sha1hl.d
? lib/libc/sha1hl.po
? lib/libc/sha2.d
? lib/libc/sha2.po
? lib/libc/sha224hl.c
? lib/libc/sha224hl.d
? lib/libc/sha224hl.po
? lib/libc/sha256hl.c
? lib/libc/sha256hl.d
? lib/libc/sha256hl.po
? lib/libc/sha384hl.c
? lib/libc/sha384hl.d
? lib/libc/sha384hl.po
? lib/libc/sha512_256hl.c
? lib/libc/sha512_256hl.d
? lib/libc/sha512_256hl.po
? lib/libc/sha512hl.c
? lib/libc/sha512hl.d
? lib/libc/sha512hl.po
? lib/libc/shm_open.d
? lib/libc/shm_open.po
? lib/libc/shmat.d
? lib/libc/shmat.po
? lib/libc/shmctl.d
? lib/libc/shmctl.po
? lib/libc/shmdt.d
? lib/libc/shmdt.po
? lib/libc/shmget.d
? lib/libc/shmget.po
? lib/libc/shutdown.d
? lib/libc/shutdown.po
? lib/libc/sigaction.d
? lib/libc/sigaction.po
? lib/libc/sigaltstack.d
? lib/libc/sigaltstack.po
? lib/libc/sigcompat.d
? lib/libc/sigcompat.po
? lib/libc/siginterrupt.d
? lib/libc/siginterrupt.po
? lib/libc/siglist.d
? lib/libc/siglist.po
? lib/libc/signal.d
? lib/libc/signal.po
? lib/libc/signame.d
? lib/libc/signame.po
? lib/libc/signbit.d
? lib/libc/signbit.po
? lib/libc/signbitl.d
? lib/libc/signbitl.po
? lib/libc/sigpending.d
? lib/libc/sigpending.po
? lib/libc/sigprocmask.d
? lib/libc/sigprocmask.po
? lib/libc/sigsetjmp.d
? lib/libc/sigsetjmp.po
? lib/libc/sigsetops.d
? lib/libc/sigsetops.po
? lib/libc/sigsuspend.d
? lib/libc/sigsuspend.po
? lib/libc/sigwait.d
? lib/libc/sigwait.po
? lib/libc/siphash.d
? lib/libc/siphash.po
? lib/libc/sleep.d
? lib/libc/sleep.po
? lib/libc/smisc.d
? lib/libc/smisc.po
? lib/libc/snprintf.d
? lib/libc/snprintf.po
? lib/libc/sockatmark.d
? lib/libc/sockatmark.po
? lib/libc/socket.d
? lib/libc/socket.po
? lib/libc/socketpair.d
? lib/libc/socketpair.po
? lib/libc/sprintf.d
? lib/libc/sprintf.po
? lib/libc/srand48.d
? lib/libc/srand48.po
? lib/libc/sscanf.d
? lib/libc/sscanf.po
? lib/libc/stack_protector.d
? lib/libc/stack_protector.po
? lib/libc/stat.d
? lib/libc/stat.po
? lib/libc/statfs.d
? lib/libc/statfs.po
? lib/libc/statvfs.d
? lib/libc/statvfs.po
? lib/libc/stdio.d
? lib/libc/stdio.po
? lib/libc/stpcpy.d
? lib/libc/stpcpy.po
? lib/libc/stpncpy.d
? lib/libc/stpncpy.po
? lib/libc/strcasecmp.d
? lib/libc/strcasecmp.po
? lib/libc/strcasecmp_l.d
? lib/libc/strcasecmp_l.po
? lib/libc/strcasestr.d
? lib/libc/strcasestr.po
? lib/libc/strcat.d
? lib/libc/strcat.po
? lib/libc/strchr.d
? lib/libc/strchr.po
? lib/libc/strcmp.d
? lib/libc/strcmp.po
? lib/libc/strcoll.d
? lib/libc/strcoll.po
? lib/libc/strcoll_l.d
? lib/libc/strcoll_l.po
? lib/libc/strcpy.d
? lib/libc/strcpy.po
? lib/libc/strcspn.d
? lib/libc/strcspn.po
? lib/libc/strdup.d
? lib/libc/strdup.po
? lib/libc/strerror.d
? lib/libc/strerror.po
? lib/libc/strerror_l.d
? lib/libc/strerror_l.po
? lib/libc/strerror_r.d
? lib/libc/strerror_r.po
? lib/libc/strftime.d
? lib/libc/strftime.po
? lib/libc/strftime_l.d
? lib/libc/strftime_l.po
? lib/libc/strlcat.d
? lib/libc/strlcat.po
? lib/libc/strlcpy.d
? lib/libc/strlcpy.po
? lib/libc/strlen.d
? lib/libc/strlen.po
? lib/libc/strmode.d
? lib/libc/strmode.po
? lib/libc/strncat.d
? lib/libc/strncat.po
? lib/libc/strncmp.d
? lib/libc/strncmp.po
? lib/libc/strncpy.d
? lib/libc/strncpy.po
? lib/libc/strndup.d
? lib/libc/strndup.po
? lib/libc/strnlen.d
? lib/libc/strnlen.po
? lib/libc/strpbrk.d
? lib/libc/strpbrk.po
? lib/libc/strptime.d
? lib/libc/strptime.po
? lib/libc/strrchr.d
? lib/libc/strrchr.po
? lib/libc/strsep.d
? lib/libc/strsep.po
? lib/libc/strsignal.d
? lib/libc/strsignal.po
? lib/libc/strspn.d
? lib/libc/strspn.po
? lib/libc/strstr.d
? lib/libc/strstr.po
? lib/libc/strtod.d
? lib/libc/strtod.po
? lib/libc/strtodg.d
? lib/libc/strtodg.po
? lib/libc/strtof.d
? lib/libc/strtof.po
? lib/libc/strtofflags.d
? lib/libc/strtofflags.po
? lib/libc/strtoimax.d
? lib/libc/strtoimax.po
? lib/libc/strtok.d
? lib/libc/strtok.po
? lib/libc/strtol.d
? lib/libc/strtol.po
? lib/libc/strtold.d
? lib/libc/strtold.po
? lib/libc/strtoll.d
? lib/libc/strtoll.po
? lib/libc/strtonum.d
? lib/libc/strtonum.po
? lib/libc/strtord.d
? lib/libc/strtord.po
? lib/libc/strtorx.d
? lib/libc/strtorx.po
? lib/libc/strtoul.d
? lib/libc/strtoul.po
? lib/libc/strtoull.d
? lib/libc/strtoull.po
? lib/libc/strtoumax.d
? lib/libc/strtoumax.po
? lib/libc/strxfrm.d
? lib/libc/strxfrm.po
? lib/libc/strxfrm_l.d
? lib/libc/strxfrm_l.po
? lib/libc/sum.d
? lib/libc/sum.po
? lib/libc/svc.d
? lib/libc/svc.po
? lib/libc/svc_auth.d
? lib/libc/svc_auth.po
? lib/libc/svc_auth_unix.d
? lib/libc/svc_auth_unix.po
? lib/libc/svc_raw.d
? lib/libc/svc_raw.po
? lib/libc/svc_run.d
? lib/libc/svc_run.po
? lib/libc/svc_simple.d
? lib/libc/svc_simple.po
? lib/libc/svc_tcp.d
? lib/libc/svc_tcp.po
? lib/libc/svc_udp.d
? lib/libc/svc_udp.po
? lib/libc/swab.d
? lib/libc/swab.po
? lib/libc/swapctl.d
? lib/libc/swapctl.po
? lib/libc/swprintf.d
? lib/libc/swprintf.po
? lib/libc/swscanf.d
? lib/libc/swscanf.po
? lib/libc/symlink.d
? lib/libc/symlink.po
? lib/libc/symlinkat.d
? lib/libc/symlinkat.po
? lib/libc/sync.d
? lib/libc/sync.po
? lib/libc/sysarch.d
? lib/libc/sysarch.po
? lib/libc/syscall.d
? lib/libc/syscall.po
? lib/libc/sysconf.d
? lib/libc/sysconf.po
? lib/libc/sysctl.d
? lib/libc/sysctl.po
? lib/libc/syslog.d
? lib/libc/syslog.po
? lib/libc/syslog_r.d
? lib/libc/syslog_r.po
? lib/libc/system.d
? lib/libc/system.po
? lib/libc/tcdrain.d
? lib/libc/tcdrain.po
? lib/libc/tcflow.d
? lib/libc/tcflow.po
? lib/libc/tcflush.d
? lib/libc/tcflush.po
? lib/libc/tcgetattr.d
? lib/libc/tcgetattr.po
? lib/libc/tcgetpgrp.d
? lib/libc/tcgetpgrp.po
? lib/libc/tcgetsid.d
? lib/libc/tcgetsid.po
? lib/libc/tcsendbreak.d
? lib/libc/tcsendbreak.po
? lib/libc/tcsetattr.d
? lib/libc/tcsetattr.po
? lib/libc/tcsetpgrp.d
? lib/libc/tcsetpgrp.po
? lib/libc/telldir.d
? lib/libc/telldir.po
? lib/libc/tempnam.d
? lib/libc/tempnam.po
? lib/libc/tfind.d
? lib/libc/tfind.po
? lib/libc/tfork_thread.d
? lib/libc/tfork_thread.po
? lib/libc/thread_atexit.d
? lib/libc/thread_atexit.po
? lib/libc/thrkill.d
? lib/libc/thrkill.po
? lib/libc/tib.d
? lib/libc/tib.po
? lib/libc/time.d
? lib/libc/time.po
? lib/libc/timer_create.d
? lib/libc/timer_create.po
? lib/libc/timer_delete.d
? lib/libc/timer_delete.po
? lib/libc/timer_getoverrun.d
? lib/libc/timer_getoverrun.po
? lib/libc/timer_gettime.d
? lib/libc/timer_gettime.po
? lib/libc/timer_settime.d
? lib/libc/timer_settime.po
? lib/libc/times.d
? lib/libc/times.po
? lib/libc/timespec_get.d
? lib/libc/timespec_get.po
? lib/libc/timingsafe_bcmp.d
? lib/libc/timingsafe_bcmp.po
? lib/libc/timingsafe_memcmp.d
? lib/libc/timingsafe_memcmp.po
? lib/libc/tmpfile.d
? lib/libc/tmpfile.po
? lib/libc/tmpnam.d
? lib/libc/tmpnam.po
? lib/libc/tolower_.d
? lib/libc/tolower_.po
? lib/libc/toupper_.d
? lib/libc/toupper_.po
? lib/libc/tree.d
? lib/libc/tree.po
? lib/libc/truncate.d
? lib/libc/truncate.po
? lib/libc/tsearch.d
? lib/libc/tsearch.po
? lib/libc/ttyname.d
? lib/libc/ttyname.po
? lib/libc/ttyslot.d
? lib/libc/ttyslot.po
? lib/libc/ualarm.d
? lib/libc/ualarm.po
? lib/libc/ulp.d
? lib/libc/ulp.po
? lib/libc/umask.d
? lib/libc/umask.po
? lib/libc/uname.d
? lib/libc/uname.po
? lib/libc/ungetc.d
? lib/libc/ungetc.po
? lib/libc/ungetwc.d
? lib/libc/ungetwc.po
? lib/libc/unlink.d
? lib/libc/unlink.po
? lib/libc/unlinkat.d
? lib/libc/unlinkat.po
? lib/libc/unmount.d
? lib/libc/unmount.po
? lib/libc/unveil.d
? lib/libc/unveil.po
? lib/libc/unvis.d
? lib/libc/unvis.po
? lib/libc/uselocale.d
? lib/libc/uselocale.po
? lib/libc/usertc.d
? lib/libc/usertc.po
? lib/libc/usleep.d
? lib/libc/usleep.po
? lib/libc/utime.d
? lib/libc/utime.po
? lib/libc/utimensat.d
? lib/libc/utimensat.po
? lib/libc/utimes.d
? lib/libc/utimes.po
? lib/libc/utrace.d
? lib/libc/utrace.po
? lib/libc/uuid_compare.d
? lib/libc/uuid_compare.po
? lib/libc/uuid_create.d
? lib/libc/uuid_create.po
? lib/libc/uuid_create_nil.d
? lib/libc/uuid_create_nil.po
? lib/libc/uuid_equal.d
? lib/libc/uuid_equal.po
? lib/libc/uuid_from_string.d
? lib/libc/uuid_from_string.po
? lib/libc/uuid_hash.d
? lib/libc/uuid_hash.po
? lib/libc/uuid_is_nil.d
? lib/libc/uuid_is_nil.po
? lib/libc/uuid_stream.d
? lib/libc/uuid_stream.po
? lib/libc/uuid_to_string.d
? lib/libc/uuid_to_string.po
? lib/libc/valloc.d
? lib/libc/valloc.po
? lib/libc/vars6.d
? lib/libc/vars6.po
? lib/libc/vasprintf.d
? lib/libc/vasprintf.po
? lib/libc/vdprintf.d
? lib/libc/vdprintf.po
? lib/libc/verr.d
? lib/libc/verr.po
? lib/libc/verrc.d
? lib/libc/verrc.po
? lib/libc/verrx.d
? lib/libc/verrx.po
? lib/libc/vfprintf.d
? lib/libc/vfprintf.po
? lib/libc/vfscanf.d
? lib/libc/vfscanf.po
? lib/libc/vfwprintf.d
? lib/libc/vfwprintf.po
? lib/libc/vfwscanf.d
? lib/libc/vfwscanf.po
? lib/libc/vis.d
? lib/libc/vis.po
? lib/libc/vprintf.d
? lib/libc/vprintf.po
? lib/libc/vscanf.d
? lib/libc/vscanf.po
? lib/libc/vsnprintf.d
? lib/libc/vsnprintf.po
? lib/libc/vsprintf.d
? lib/libc/vsprintf.po
? lib/libc/vsscanf.d
? lib/libc/vsscanf.po
? lib/libc/vswprintf.d
? lib/libc/vswprintf.po
? lib/libc/vswscanf.d
? lib/libc/vswscanf.po
? lib/libc/vwarn.d
? lib/libc/vwarn.po
? lib/libc/vwarnc.d
? lib/libc/vwarnc.po
? lib/libc/vwarnx.d
? lib/libc/vwarnx.po
? lib/libc/vwprintf.d
? lib/libc/vwprintf.po
? lib/libc/vwscanf.d
? lib/libc/vwscanf.po
? lib/libc/w_accept.d
? lib/libc/w_accept.po
? lib/libc/w_accept4.d
? lib/libc/w_accept4.po
? lib/libc/w_clock_gettime.d
? lib/libc/w_clock_gettime.po
? lib/libc/w_close.d
? lib/libc/w_close.po
? lib/libc/w_closefrom.d
? lib/libc/w_closefrom.po
? lib/libc/w_connect.d
? lib/libc/w_connect.po
? lib/libc/w_fcntl.d
? lib/libc/w_fcntl.po
? lib/libc/w_fork.d
? lib/libc/w_fork.po
? lib/libc/w_fsync.d
? lib/libc/w_fsync.po
? lib/libc/w_gettimeofday.d
? lib/libc/w_gettimeofday.po
? lib/libc/w_msgrcv.d
? lib/libc/w_msgrcv.po
? lib/libc/w_msgsnd.d
? lib/libc/w_msgsnd.po
? lib/libc/w_msync.d
? lib/libc/w_msync.po
? lib/libc/w_nanosleep.d
? lib/libc/w_nanosleep.po
? lib/libc/w_open.d
? lib/libc/w_open.po
? lib/libc/w_openat.d
? lib/libc/w_openat.po
? lib/libc/w_poll.d
? lib/libc/w_poll.po
? lib/libc/w_ppoll.d
? lib/libc/w_ppoll.po
? lib/libc/w_pread.d
? lib/libc/w_pread.po
? lib/libc/w_preadv.d
? lib/libc/w_preadv.po
? lib/libc/w_pselect.d
? lib/libc/w_pselect.po
? lib/libc/w_pwrite.d
? lib/libc/w_pwrite.po
? lib/libc/w_pwritev.d
? lib/libc/w_pwritev.po
? lib/libc/w_read.d
? lib/libc/w_read.po
? lib/libc/w_readv.d
? lib/libc/w_readv.po
? lib/libc/w_recvfrom.d
? lib/libc/w_recvfrom.po
? lib/libc/w_recvmsg.d
? lib/libc/w_recvmsg.po
? lib/libc/w_select.d
? lib/libc/w_select.po
? lib/libc/w_sendmsg.d
? lib/libc/w_sendmsg.po
? lib/libc/w_sendto.d
? lib/libc/w_sendto.po
? lib/libc/w_sigaction.d
? lib/libc/w_sigaction.po
? lib/libc/w_sigprocmask.d
? lib/libc/w_sigprocmask.po
? lib/libc/w_sigsuspend.d
? lib/libc/w_sigsuspend.po
? lib/libc/w_vfork.d
? lib/libc/w_vfork.po
? lib/libc/w_wait4.d
? lib/libc/w_wait4.po
? lib/libc/w_write.d
? lib/libc/w_write.po
? lib/libc/w_writev.d
? lib/libc/w_writev.po
? lib/libc/wait.d
? lib/libc/wait.po
? lib/libc/wait3.d
? lib/libc/wait3.po
? lib/libc/wait4.d
? lib/libc/wait4.po
? lib/libc/waitpid.d
? lib/libc/waitpid.po
? lib/libc/warn.d
? lib/libc/warn.po
? lib/libc/warnc.d
? lib/libc/warnc.po
? lib/libc/warnx.d
? lib/libc/warnx.po
? lib/libc/wbuf.d
? lib/libc/wbuf.po
? lib/libc/wcscasecmp.d
? lib/libc/wcscasecmp.po
? lib/libc/wcscasecmp_l.d
? lib/libc/wcscasecmp_l.po
? lib/libc/wcscat.d
? lib/libc/wcscat.po
? lib/libc/wcschr.d
? lib/libc/wcschr.po
? lib/libc/wcscmp.d
? lib/libc/wcscmp.po
? lib/libc/wcscoll.d
? lib/libc/wcscoll.po
? lib/libc/wcscoll_l.d
? lib/libc/wcscoll_l.po
? lib/libc/wcscpy.d
? lib/libc/wcscpy.po
? lib/libc/wcscspn.d
? lib/libc/wcscspn.po
? lib/libc/wcsdup.d
? lib/libc/wcsdup.po
? lib/libc/wcsftime.d
? lib/libc/wcsftime.po
? lib/libc/wcslcat.d
? lib/libc/wcslcat.po
? lib/libc/wcslcpy.d
? lib/libc/wcslcpy.po
? lib/libc/wcslen.d
? lib/libc/wcslen.po
? lib/libc/wcsncat.d
? lib/libc/wcsncat.po
? lib/libc/wcsncmp.d
? lib/libc/wcsncmp.po
? lib/libc/wcsncpy.d
? lib/libc/wcsncpy.po
? lib/libc/wcspbrk.d
? lib/libc/wcspbrk.po
? lib/libc/wcsrchr.d
? lib/libc/wcsrchr.po
? lib/libc/wcsspn.d
? lib/libc/wcsspn.po
? lib/libc/wcsstr.d
? lib/libc/wcsstr.po
? lib/libc/wcstod.d
? lib/libc/wcstod.po
? lib/libc/wcstof.d
? lib/libc/wcstof.po
? lib/libc/wcstoimax.d
? lib/libc/wcstoimax.po
? lib/libc/wcstok.d
? lib/libc/wcstok.po
? lib/libc/wcstol.d
? lib/libc/wcstol.po
? lib/libc/wcstold.d
? lib/libc/wcstold.po
? lib/libc/wcstoll.d
? lib/libc/wcstoll.po
? lib/libc/wcstombs.d
? lib/libc/wcstombs.po
? lib/libc/wcstoul.d
? lib/libc/wcstoul.po
? lib/libc/wcstoull.d
? lib/libc/wcstoull.po
? lib/libc/wcstoumax.d
? lib/libc/wcstoumax.po
? lib/libc/wcswcs.d
? lib/libc/wcswcs.po
? lib/libc/wcswidth.d
? lib/libc/wcswidth.po
? lib/libc/wcsxfrm.d
? lib/libc/wcsxfrm.po
? lib/libc/wcsxfrm_l.d
? lib/libc/wcsxfrm_l.po
? lib/libc/wctob.d
? lib/libc/wctob.po
? lib/libc/wctomb.d
? lib/libc/wctomb.po
? lib/libc/wmemchr.d
? lib/libc/wmemchr.po
? lib/libc/wmemcmp.d
? lib/libc/wmemcmp.po
? lib/libc/wmemcpy.d
? lib/libc/wmemcpy.po
? lib/libc/wmemmove.d
? lib/libc/wmemmove.po
? lib/libc/wmemset.d
? lib/libc/wmemset.po
? lib/libc/wprintf.d
? lib/libc/wprintf.po
? lib/libc/write.d
? lib/libc/write.po
? lib/libc/writev.d
? lib/libc/writev.po
? lib/libc/wscanf.d
? lib/libc/wscanf.po
? lib/libc/wsetup.d
? lib/libc/wsetup.po
? lib/libc/xdr.d
? lib/libc/xdr.po
? lib/libc/xdr_array.d
? lib/libc/xdr_array.po
? lib/libc/xdr_domainname.d
? lib/libc/xdr_domainname.po
? lib/libc/xdr_float.d
? lib/libc/xdr_float.po
? lib/libc/xdr_keydat.d
? lib/libc/xdr_keydat.po
? lib/libc/xdr_mapname.d
? lib/libc/xdr_mapname.po
? lib/libc/xdr_mem.d
? lib/libc/xdr_mem.po
? lib/libc/xdr_peername.d
? lib/libc/xdr_peername.po
? lib/libc/xdr_rec.d
? lib/libc/xdr_rec.po
? lib/libc/xdr_reference.d
? lib/libc/xdr_reference.po
? lib/libc/xdr_stdio.d
? lib/libc/xdr_stdio.po
? lib/libc/xdr_valdat.d
? lib/libc/xdr_valdat.po
? lib/libc/xdr_ypbind_binding.d
? lib/libc/xdr_ypbind_binding.po
? lib/libc/xdr_ypbind_resp.d
? lib/libc/xdr_ypbind_resp.po
? lib/libc/xdr_ypbind_resptype.d
? lib/libc/xdr_ypbind_resptype.po
? lib/libc/xdr_ypbind_setdom.d
? lib/libc/xdr_ypbind_setdom.po
? lib/libc/xdr_ypmaplist.d
? lib/libc/xdr_ypmaplist.po
? lib/libc/xdr_ypreq_key.d
? lib/libc/xdr_ypreq_key.po
? lib/libc/xdr_ypreq_nokey.d
? lib/libc/xdr_ypreq_nokey.po
? lib/libc/xdr_ypresp_all.d
? lib/libc/xdr_ypresp_all.po
? lib/libc/xdr_ypresp_key_val.d
? lib/libc/xdr_ypresp_key_val.po
? lib/libc/xdr_ypresp_maplist.d
? lib/libc/xdr_ypresp_maplist.po
? lib/libc/xdr_ypresp_master.d
? lib/libc/xdr_ypresp_master.po
? lib/libc/xdr_ypresp_order.d
? lib/libc/xdr_ypresp_order.po
? lib/libc/xdr_ypresp_val.d
? lib/libc/xdr_ypresp_val.po
? lib/libc/xdr_ypstat.d
? lib/libc/xdr_ypstat.po
? lib/libc/yp_all.d
? lib/libc/yp_all.po
? lib/libc/yp_bind.d
? lib/libc/yp_bind.po
? lib/libc/yp_first.d
? lib/libc/yp_first.po
? lib/libc/yp_get_default_domain.d
? lib/libc/yp_get_default_domain.po
? lib/libc/yp_maplist.d
? lib/libc/yp_maplist.po
? lib/libc/yp_master.d
? lib/libc/yp_master.po
? lib/libc/yp_order.d
? lib/libc/yp_order.po
? lib/libc/yperr_string.d
? lib/libc/yperr_string.po
? lib/libc/ypexclude.d
? lib/libc/ypexclude.po
? lib/libc/ypmatch_cache.d
? lib/libc/ypmatch_cache.po
? lib/libc/ypprot_err.d
? lib/libc/ypprot_err.po
? lib/libc/gen/pfexecvp.3
? lib/libc/hidden/sys/pfexec.h
? lib/libc/sys/pfexecve.2
? lib/libcrypto/obj_mac.h
? lib/libcrypto/obj_mac.num.tmp
? lib/librpcsvc/bootparam_prot.h
? lib/librpcsvc/klm_prot.h
? lib/librpcsvc/mount.h
? lib/librpcsvc/nfs_prot.h
? lib/librpcsvc/nlm_prot.h
? lib/librpcsvc/rex.h
? lib/librpcsvc/rnusers.h
? lib/librpcsvc/rquota.h
? lib/librpcsvc/rstat.h
? lib/librpcsvc/rusers.h
? lib/librpcsvc/rwall.h
? lib/librpcsvc/sm_inter.h
? lib/librpcsvc/spray.h
? lib/librpcsvc/yp.h
? lib/librpcsvc/yppasswd.h
? sys/sys/pfexec.h
? sys/sys/pfexecvar.h
? usr.bin/pfexec/Makefile
? usr.bin/pfexec/pfexec.1
? usr.bin/pfexec/pfexec.c
? usr.sbin/pfexecd/Makefile
? usr.sbin/pfexecd/env.c
? usr.sbin/pfexecd/parse.c
? usr.sbin/pfexecd/parse.d
? usr.sbin/pfexecd/parse.y
? usr.sbin/pfexecd/pfexecd
? usr.sbin/pfexecd/pfexecd.8
? usr.sbin/pfexecd/pfexecd.c
? usr.sbin/pfexecd/pfexecd.conf.5
? usr.sbin/pfexecd/pfexecd.h
Index: lib/libc/Symbols.list
===================================================================
RCS file: /cvs/src/lib/libc/Symbols.list,v
retrieving revision 1.73
diff -u -p -u -p -r1.73 Symbols.list
--- lib/libc/Symbols.list	24 Oct 2019 05:57:41 -0000	1.73
+++ lib/libc/Symbols.list	23 Oct 2021 11:31:40 -0000
@@ -709,6 +709,9 @@ openlog
 openlog_r
 pause
 pclose
+pfexecve
+pfexecvp
+pfexecvpe
 popen
 posix_spawn
 posix_spawn_file_actions_addclose
Index: lib/libc/gen/Makefile.inc
===================================================================
RCS file: /cvs/src/lib/libc/gen/Makefile.inc,v
retrieving revision 1.82
diff -u -p -u -p -r1.82 Makefile.inc
--- lib/libc/gen/Makefile.inc	2 Sep 2019 21:18:40 -0000	1.82
+++ lib/libc/gen/Makefile.inc	23 Oct 2021 11:31:41 -0000
@@ -54,4 +54,5 @@ MAN+=	__tfork_thread.3 alarm.3 auth_subr
 	siginterrupt.3 signal.3 \
 	sigaddset.3 sigwait.3 sleep.3 statvfs.3 sysconf.3 strtofflags.3 \
 	syslog.3 time.3 times.3 timespec_get.3 toascii.3 tolower.3 toupper.3 \
-	ttyname.3 ualarm.3 uname.3 unvis.3 usleep.3 utime.3 valloc.3 vis.3
+	ttyname.3 ualarm.3 uname.3 unvis.3 usleep.3 utime.3 valloc.3 vis.3 \
+	pfexecvp.3
Index: lib/libc/gen/exec.c
===================================================================
RCS file: /cvs/src/lib/libc/gen/exec.c,v
retrieving revision 1.23
diff -u -p -u -p -r1.23 exec.c
--- lib/libc/gen/exec.c	13 Mar 2016 18:34:20 -0000	1.23
+++ lib/libc/gen/exec.c	23 Oct 2021 11:31:41 -0000
@@ -30,6 +30,7 @@
 
 #include <sys/types.h>
 #include <sys/uio.h>
+#include <sys/pfexec.h>
 
 #include <errno.h>
 #include <limits.h>
@@ -143,7 +144,7 @@ execvpe(const char *name, char *const *a
 	if (name == NULL || *name == '\0') {
 		errno = ENOENT;
 		return (-1);
- 	}
+	}
 
 	/* If it's an absolute or relative path name, it's easy. */
 	if (strchr(name, '/')) {
@@ -250,3 +251,126 @@ execvp(const char *name, char *const *ar
 }
 DEF_WEAK(execvp);
 
+int
+pfexecvpe(const struct pfexecve_opts *opts, const char *name, char *const *argv,
+    char *const *envp)
+{
+	char **memp;
+	int cnt;
+	size_t lp, ln, len;
+	char *p;
+	int eacces = 0;
+	char *bp, *cur, *path, buf[PATH_MAX];
+
+	/*
+	 * Do not allow null name
+	 */
+	if (name == NULL || *name == '\0') {
+		errno = ENOENT;
+		return (-1);
+	}
+
+	/* If it's an absolute or relative path name, it's easy. */
+	if (strchr(name, '/')) {
+		bp = (char *)name;
+		cur = path = NULL;
+		goto retry;
+	}
+	bp = buf;
+
+	/* Get the path we're searching. */
+	if (!(path = getenv("PATH")))
+		path = _PATH_DEFPATH;
+	len = strlen(path) + 1;
+	cur = alloca(len);
+	if (cur == NULL) {
+		errno = ENOMEM;
+		return (-1);
+	}
+	strlcpy(cur, path, len);
+	path = cur;
+	while ((p = strsep(&cur, ":"))) {
+		/*
+		 * It's a SHELL path -- double, leading and trailing colons
+		 * mean the current directory.
+		 */
+		if (!*p) {
+			p = ".";
+			lp = 1;
+		} else
+			lp = strlen(p);
+		ln = strlen(name);
+
+		/*
+		 * If the path is too long complain.  This is a possible
+		 * security issue; given a way to make the path too long
+		 * the user may execute the wrong program.
+		 */
+		if (lp + ln + 2 > sizeof(buf)) {
+			struct iovec iov[3];
+
+			iov[0].iov_base = "execvp: ";
+			iov[0].iov_len = 8;
+			iov[1].iov_base = p;
+			iov[1].iov_len = lp;
+			iov[2].iov_base = ": path too long\n";
+			iov[2].iov_len = 16;
+			(void)writev(STDERR_FILENO, iov, 3);
+			continue;
+		}
+		bcopy(p, buf, lp);
+		buf[lp] = '/';
+		bcopy(name, buf + lp + 1, ln);
+		buf[lp + ln + 1] = '\0';
+
+retry:		(void)pfexecve(opts, bp, argv, envp);
+		switch(errno) {
+		case E2BIG:
+			goto done;
+		case EISDIR:
+		case ELOOP:
+		case ENAMETOOLONG:
+		case ENOENT:
+			break;
+		case ENOEXEC:
+			for (cnt = 0; argv[cnt]; ++cnt)
+				;
+			memp = alloca((cnt + 2) * sizeof(char *));
+			if (memp == NULL)
+				goto done;
+			memp[0] = "sh";
+			memp[1] = bp;
+			bcopy(argv + 1, memp + 2, cnt * sizeof(char *));
+			(void)pfexecve(opts, _PATH_BSHELL, memp, envp);
+			goto done;
+		case ENOMEM:
+			goto done;
+		case ENOTDIR:
+			break;
+		case ETXTBSY:
+			/*
+			 * We used to retry here, but sh(1) doesn't.
+			 */
+			goto done;
+		case EACCES:
+			eacces = 1;
+			break;
+		default:
+			goto done;
+		}
+	}
+	if (eacces)
+		errno = EACCES;
+	else if (!errno)
+		errno = ENOENT;
+done:
+	return (-1);
+}
+DEF_WEAK(pfexecvpe);
+
+int
+pfexecvp(const struct pfexecve_opts *opts, const char *name, char *const *argv)
+{
+    return pfexecvpe(opts, name, argv, environ);
+}
+DEF_WEAK(pfexecvp);
Index: lib/libc/sys/Makefile.inc
===================================================================
RCS file: /cvs/src/lib/libc/sys/Makefile.inc,v
retrieving revision 1.159
diff -u -p -u -p -r1.159 Makefile.inc
--- lib/libc/sys/Makefile.inc	6 Jul 2020 13:33:06 -0000	1.159
+++ lib/libc/sys/Makefile.inc	23 Oct 2021 11:31:41 -0000
@@ -46,7 +46,7 @@ ASM=	__semctl.o __syscall.o __thrsigdive
 	bind.o chdir.o chflags.o chflagsat.o chmod.o chown.o chroot.o \
 	clock_getres.o clock_settime.o \
 	dup.o dup2.o dup3.o \
-	execve.o \
+	execve.o pfexecve.o \
 	faccessat.o fchdir.o fchflags.o fchmod.o fchmodat.o fchown.o \
 	fchownat.o fhopen.o fhstat.o fhstatfs.o \
 	flock.o fpathconf.o fstat.o fstatat.o fstatfs.o \
@@ -197,4 +197,5 @@ MAN+=	__get_tcb.2 __thrsigdivert.2 __thr
 	sigprocmask.2 sigreturn.2 sigsuspend.2 socket.2 \
 	socketpair.2 stat.2 statfs.2 swapctl.2 symlink.2 \
 	sync.2 sysarch.2 syscall.2 sysctl.2 thrkill.2 truncate.2 \
-	umask.2 unlink.2 unveil.2 utimes.2 utrace.2 vfork.2 wait.2 write.2
+	umask.2 unlink.2 unveil.2 utimes.2 utrace.2 vfork.2 wait.2 write.2 \
+	pfexecve.2
Index: sys/conf/files
===================================================================
RCS file: /cvs/src/sys/conf/files,v
retrieving revision 1.702
diff -u -p -u -p -r1.702 files
--- sys/conf/files	16 Apr 2021 08:17:35 -0000	1.702
+++ sys/conf/files	23 Oct 2021 11:31:48 -0000
@@ -704,6 +704,7 @@ file kern/kern_resource.c
 file kern/kern_pledge.c
 file kern/kern_unveil.c
 file kern/kern_sched.c
+file kern/kern_pfexec.c
 file kern/kern_intrmap.c		intrmap
 file kern/kern_sensors.c
 file kern/kern_sig.c
Index: sys/kern/init_main.c
===================================================================
RCS file: /cvs/src/sys/kern/init_main.c,v
retrieving revision 1.306
diff -u -p -u -p -r1.306 init_main.c
--- sys/kern/init_main.c	8 Feb 2021 10:51:01 -0000	1.306
+++ sys/kern/init_main.c	23 Oct 2021 11:31:49 -0000
@@ -744,6 +744,7 @@ start_init(void *arg)
 		SCARG(&args, path) = arg0;
 		SCARG(&args, argp) = uap;
 		SCARG(&args, envp) = NULL;
+		SCARG(&args, kenvp) = NULL;
 
 		/*
 		 * Now try to exec the program.  If can't for any reason
Index: sys/kern/init_sysent.c
===================================================================
RCS file: /cvs/src/sys/kern/init_sysent.c,v
retrieving revision 1.220
diff -u -p -u -p -r1.220 init_sysent.c
--- sys/kern/init_sysent.c	18 Mar 2021 08:44:59 -0000	1.220
+++ sys/kern/init_sysent.c	23 Oct 2021 11:31:49 -0000
@@ -1,4 +1,4 @@
-/*	$OpenBSD: init_sysent.c,v 1.220 2021/03/18 08:44:59 mvs Exp $	*/
+/*	$OpenBSD$	*/
 
 /*
  * System call switch table.
@@ -751,5 +751,7 @@ struct sysent sysent[] = {
 	    sys___set_tcb },			/* 329 = __set_tcb */
 	{ 0, 0, SY_NOLOCK | 0,
 	    sys___get_tcb },			/* 330 = __get_tcb */
+	{ 4, s(struct sys_pfexecve_args), 0,
+	    sys_pfexecve },			/* 331 = pfexecve */
 };
 
Index: sys/kern/kern_exec.c
===================================================================
RCS file: /cvs/src/sys/kern/kern_exec.c,v
retrieving revision 1.223
diff -u -p -u -p -r1.223 kern_exec.c
--- sys/kern/kern_exec.c	16 Mar 2021 16:32:22 -0000	1.223
+++ sys/kern/kern_exec.c	23 Oct 2021 11:31:49 -0000
@@ -248,6 +248,7 @@ sys_execve(struct proc *p, void *v, regi
 		syscallarg(const char *) path;
 		syscallarg(char *const *) argp;
 		syscallarg(char *const *) envp;
+		syscallarg(char **) kenvp;
 	} */ *uap = v;
 	int error;
 	struct exec_package pack;
@@ -271,6 +272,8 @@ sys_execve(struct proc *p, void *v, regi
 	extern struct emul emul_native;
 	struct vnode *otvp;
 
+	char **my_kenvp;
+
 	/* get other threads to stop */
 	if ((error = single_thread_set(p, SINGLE_UNWIND, 1)))
 		return (error);
@@ -398,6 +401,22 @@ sys_execve(struct proc *p, void *v, regi
 		if (KTRPOINT(p, KTR_EXECENV))
 			ktrexec(p, KTR_EXECENV, env_start, dp - env_start);
 #endif
+	} else if ((my_kenvp = SCARG(uap, kenvp)) != NULL) {
+#ifdef PFEXDEBUG
+		printf("pfexec-env\n");
+#endif
+		while (1) {
+			env_start = dp;
+			len = argp + ARG_MAX - dp;
+			memcpy(&sp, my_kenvp, sizeof(sp));
+			if (!sp)
+				break;
+			len = strlcpy(dp, sp, len);
+			len += 1;
+			dp += len;
+			my_kenvp++;
+			envc++;
+		}
 	}
 
 	dp = (char *)(((long)dp + _STACKALIGNBYTES) & ~_STACKALIGNBYTES);
Index: sys/kern/kern_pfexec.c
===================================================================
RCS file: sys/kern/kern_pfexec.c
diff -N sys/kern/kern_pfexec.c
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ sys/kern/kern_pfexec.c	23 Oct 2021 11:31:49 -0000
@@ -0,0 +1,891 @@
+#include <sys/types.h>
+#include <sys/systm.h>
+
+#include <sys/socket.h>
+#include <sys/socketvar.h>
+#include <sys/un.h>
+
+#include <sys/mbuf.h>
+#include <sys/param.h>
+#include <sys/systm.h>
+#include <sys/task.h>
+
+#include <sys/namei.h>
+#include <sys/filedesc.h>
+#include <sys/vnode.h>
+#include <sys/pledge.h>
+
+#include <sys/pfexecvar.h>
+#include <sys/pfexec.h>
+#include <sys/proc.h>
+#include <sys/mount.h>
+#include <sys/syscallargs.h>
+
+/*
+ * Switch this on for debugging
+ * #define PFEXDEBUG 0
+ */
+
+/*
+ * Data required over taskq, and handling request
+ */
+struct sock_data {
+	struct proc *p;
+
+	int ident;
+	struct taskq *tq;
+
+	struct sys_pfexecve_args /* {
+		syscallarg(const struct pfexecve_opts *) opts;
+		syscallarg(const char *) path;
+		syscallarg(char *const *) argp;
+		syscallarg(char *const *) envp;
+	}; */ *uap;
+
+	struct socket *so;
+
+	struct mbuf *req_m;
+	struct pfexec_req *req;
+
+	struct mbuf *resp_m;
+	struct pfexec_resp *resp;
+
+	struct task start;
+	struct task end;
+
+	struct ucred *orig_pcred;
+
+	char **environment;
+
+	int sys_pf_errno;
+};
+
+u_int req_mext_handler = 0;
+struct rwlock req_lock = RWLOCK_INITIALIZER("destroy_req");
+
+/*
+ * Start a socket connection, if error fill in data
+ */
+void
+listen_sock(void *arg)
+{
+#ifdef PFEXDEBUG
+	printf("listen_sock -s\n");
+#endif
+
+	struct sock_data *data = (struct sock_data *)arg;
+	struct socket *so = NULL;
+	struct sockaddr *sa = NULL;
+	struct sockaddr_un *su = NULL;
+	struct mbuf *m = NULL, *mopt = NULL;
+	int ret = 0, *slen = NULL, s;
+
+	ret = socreate(AF_UNIX, &so, SOCK_SEQPACKET, 0);
+	if (ret) {
+#ifdef PFEXDEBUG
+		printf("%s: socreate error %d\n",
+		    __func__, ret);
+#endif
+		goto close;
+	}
+#ifdef PFEXDEBUG
+	printf("socket create\n");
+#endif
+
+	MGET(mopt, M_WAIT, MT_SOOPTS);
+	mopt->m_len = sizeof(int);
+	slen = mtod(mopt, int *);
+	*slen = sizeof(struct pfexec_req);
+	s = solock(so);
+	ret = sosetopt(so, SOL_SOCKET, SO_SNDBUF, mopt);
+	sounlock(so, s);
+	m_freem(mopt);
+	if (ret) {
+#ifdef PFEXDEBUG
+		printf("%s: sosetopt error %d\n",
+		    __func__, ret);
+#endif
+		goto close;
+	}
+#ifdef PFEXDEBUG
+	printf("socket setopt(SNDBUF)\n");
+#endif
+
+	MGET(mopt, M_WAIT, MT_SOOPTS);
+	mopt->m_len = sizeof(int);
+	slen = mtod(mopt, int *);
+	*slen = sizeof(struct pfexec_resp) + 32;
+	s = solock(so);
+	ret = sosetopt(so, SOL_SOCKET, SO_RCVBUF, mopt);
+	sounlock(so, s);
+	m_freem(mopt);
+	if (ret) {
+#ifdef PFEXDEBUG
+		printf("%s: sosetopt error %d\n",
+		    __func__, ret);
+#endif
+		goto close;
+	}
+#ifdef PFEXDEBUG
+	printf("socket setopt(RCVBUF)\n");
+#endif // sockopt
+
+	MGET(m, M_WAIT, MT_SONAME);
+	m->m_len = sizeof(struct sockaddr_un);
+	sa = mtod(m, struct sockaddr *);
+	su = (struct sockaddr_un *)sa;
+	su->sun_len = sizeof(struct sockaddr_un);
+	su->sun_family = AF_UNIX;
+	memcpy(su->sun_path, PFEXECD_SOCK, sizeof(su->sun_path));
+
+	s = solock(so);
+	ret = soconnect(so, m);
+	if (ret) {
+#ifdef PFEXDEBUG
+		printf("%s: soconnect error %d\n",
+		    __func__, ret);
+#endif
+		goto bad;
+	}
+#ifdef PFEXDEBUG
+	printf("socket connect\n");
+#endif
+	/*
+	 * Wait for the connection to complete. Cribbed from the
+	 * connect system call but with the wait timing out so
+	 * that interruptible mounts don't hang here for a long time.
+	 */
+	while ((so->so_state & SS_ISCONNECTING) && so->so_error == 0) {
+		sosleep_nsec(so, &so->so_timeo, PF_UNIX, "pfexec-sock", \
+		    SEC_TO_NSEC(2));
+		if ((so->so_state & SS_ISCONNECTING) &&
+		    so->so_error == 0) {
+			so->so_state &= ~SS_ISCONNECTING;
+			goto bad;
+		}
+	}
+	if (so->so_error) {
+		ret = so->so_error;
+		so->so_error = 0;
+		goto bad;
+	}
+	sounlock(so, s);
+#ifdef PFEXDEBUG
+	printf("socket connected\n");
+#endif
+	data->so = so;
+	m_free(m);
+
+close:
+#ifdef PFEXDEBUG
+	printf("listen_so -e\n");
+#endif
+	data->sys_pf_errno = !ret ? ret : ENOTCONN;
+	return;
+bad:
+#ifdef PFEXDEBUG
+	printf("%s: so connection error %d\n",
+	    __func__, ret);
+#endif
+	sounlock(so, s);
+	soclose(so, MSG_WAITALL);
+	m_free(m);
+	goto close;
+}
+
+/*
+ * Callback function to free in the mbuf MEXT
+ */
+void
+free_req(caddr_t addr, u_int size, void *arg)
+{
+	free(addr, M_TEMP, size);
+}
+
+/*
+ * Fill in the data to send to the daemon
+ */
+void
+craft_mbuf(void *arg)
+{
+#ifdef PFEXDEBUG
+	printf("craft_mbuf -s\n");
+#endif
+	struct sock_data *data = (struct sock_data *)arg;
+	struct mbuf *m = NULL;
+	struct pfexec_req *req = \
+	    malloc(sizeof(struct pfexec_req), M_TEMP, M_WAITOK | M_ZERO);
+	int reg = 0;
+
+	if (req == NULL) {
+		data->sys_pf_errno = ENOMEM;
+		goto error;
+	}
+
+	MGETHDR(m, M_WAIT, MT_DATA);
+
+	reg = 0;
+	rw_enter_read(&req_lock);
+	if (req_mext_handler == 0)
+		req_mext_handler = mextfree_register(free_req);
+	reg = req_mext_handler;
+	rw_exit_read(&req_lock);
+
+	MEXTADD(m, req, sizeof(struct pfexec_req), 0, reg, NULL);
+	data->req_m = m;
+	data->req = req;
+error:
+#ifdef PFEXDEBUG
+	printf("craft_mbuf -e\n");
+#endif // craft mub
+	reg++;
+}
+
+/*
+ * Send the request packet
+ */
+void
+send_sock(void *arg)
+{
+#ifdef PFEXDEBUG
+	printf("send_sock -s\n");
+#endif
+	struct sock_data *data = (struct sock_data *)arg;
+	struct socket *so = data->so;
+	struct mbuf *m = data->req_m;
+	int ret = 0;
+
+	ret = sosend(so, NULL, NULL, m, NULL, MSG_WAITALL);
+	if (ret) {
+#ifdef PFEXDEBUG
+		printf("%s: sosend error %d\n",
+		    __func__, ret);
+#endif
+		goto error;
+	}
+
+	data->req = NULL;
+	data->req_m = NULL;
+error:
+	data->sys_pf_errno = ret;
+#ifdef PFEXDEBUG
+	printf("send_sock -e\n");
+#endif // send_sock
+}
+
+/*
+ * Receive the response packet
+ */
+void
+rcv_sock(void *arg)
+{
+#ifdef PFEXDEBUG
+	printf("rcv_sock -s\n");
+#endif
+	struct sock_data *data = (struct sock_data *)arg;
+	struct socket *so = data->so;
+	struct pfexec_resp *resp = NULL;
+	struct mbuf *from = NULL, *m = NULL;
+	struct uio uio = {0};
+	int ret = 0, flags = 0, len = 0, total = 0;
+
+	total = len = uio.uio_resid = sizeof(struct pfexec_resp);
+	flags = MSG_WAITALL;
+	do {
+		ret = soreceive(so, &from, &uio, &m, NULL, &flags, 0);
+		if (ret /* && ret != EAGAIN */ || m == NULL) {
+			if (m == NULL)
+				ret = EPIPE;
+#ifdef PFEXDEBUG
+			printf("%s: soreceuive error %d\n",
+			    __func__, ret);
+#endif
+			goto close;
+		}
+		len -= (total - uio.uio_resid);
+	} while (len > 0);
+
+	data->resp_m = m;
+	resp = data->resp = \
+	    malloc(sizeof(struct pfexec_resp), M_TEMP, M_WAITOK | M_ZERO);
+	if (resp == NULL) {
+		ret = ENOMEM;
+		goto close;
+	}
+
+	m_copydata(m, 0, sizeof(struct pfexec_resp), data->resp);
+#ifdef PFEXDEBUG
+	printf("resp %p, resp.errno:%d\n", resp, resp->pfr_errno);
+#endif
+	m_freem(from);
+close:
+	data->sys_pf_errno = ret;
+#ifdef PFEXDEBUG
+	printf("rcv_sock -e\n");
+#endif // rcv_sock
+}
+
+void
+end_sock(void *arg)
+{
+#ifdef PFEXDEBUG
+	printf("end_sock -s\n");
+#endif
+	struct sock_data *data = (struct sock_data *)arg;
+
+	soclose(data->so, MSG_WAITALL);
+
+	m_freem(data->resp_m);
+	data->resp_m = NULL;
+
+	task_del(data->tq, &data->end);
+
+	wakeup(&data->ident);
+#ifdef PFEXDEBUG
+	printf("end_sock -e\n");
+#endif
+}
+
+/*
+ * TaskQ handler of all managing socket traffic
+ */
+void
+start_sock(void *arg)
+{
+#ifdef PFEXDEBUG
+	printf("start_sock -s\n");
+#endif
+	struct sock_data *data = (struct sock_data *)arg;
+
+	listen_sock(data);
+	if (data->sys_pf_errno != 0)
+		goto bad;
+
+	send_sock(data);
+	if (data->sys_pf_errno != 0)
+		goto error;
+
+	rcv_sock(data);
+	if (data->sys_pf_errno != 0)
+		goto error;
+error:
+	task_del(data->tq, &data->start);
+
+	task_add(data->tq, &data->end);
+bad:
+	wakeup(&data->ident);
+#ifdef PFEXDEBUG
+	printf("start_sock -e\n");
+#endif
+}
+
+/*
+ * Gather the data about this request and fill it in
+ */
+void
+fill_mbuf(void *arg)
+{
+#ifdef PFEXDEBUG
+	printf("fill_mbuf -s\n");
+#endif
+	struct sock_data *data = (struct sock_data *)arg;
+	const struct pfexecve_opts *opts = SCARG(data->uap, opts);
+	struct process *proc = data->p->p_p;
+	struct ucred *creds = data->p->p_p->ps_ucred;
+	struct pfexec_req *req = data->req;
+	int ret = 0;
+
+#ifdef PFEXDEBUG
+	printf("pid: %d\n", proc->ps_pid);
+#endif
+
+	/*	SYS_SPACE ARGS	*/
+	memcpy(&req->pfr_pid, &proc->ps_pid, sizeof(req->pfr_pid));
+
+	memcpy(&req->pfr_uid, &creds->cr_uid, sizeof(req->pfr_uid));
+	memcpy(&req->pfr_gid, &creds->cr_gid, sizeof(req->pfr_gid));
+	memcpy(&req->pfr_ngroups, &creds->cr_ngroups, \
+	    sizeof(creds->cr_ngroups));
+	memcpy(req->pfr_groups, creds->cr_groups, \
+	    sizeof(req->pfr_groups));
+
+	/*	USER_SPECE ARGS	*/
+
+	size_t copied = 0;
+	ret = copyin(&opts->pfo_flags, &data->req->pfr_req_flags, \
+	    sizeof(data->req->pfr_req_flags));
+
+	data->req->pfr_req_user[sizeof(data->req->pfr_req_user) - 1] = '\0';
+	ret = copyinstr(opts->pfo_user, data->req->pfr_req_user, \
+	    sizeof(data->req->pfr_req_user), &copied);
+
+	data->req->pfr_path[sizeof(data->req->pfr_path) - 1] = '\0';
+	ret = copyinstr(SCARG(data->uap, path), \
+	    data->req->pfr_path, sizeof(data->req->pfr_path), &copied);
+
+	copied = 0;
+	int argc = 0;
+	size_t max = ARG_MAX, len = 0;
+	char *const *from = SCARG(data->uap, argp);
+
+#ifdef PFEXDEBUG
+		printf("args{");
+#endif
+
+	while (argc < 1024 && max > 0 && from != NULL && \
+	    from[argc] != NULL) {
+#ifdef PFEXDEBUG
+		printf("%s ", from[argc]);
+#endif
+		data->req->pfr_argp[argc].pfa_offset = len;
+		ret = copyinstr(from[argc], \
+		    data->req->pfr_argarea + len, max - len, &copied);
+		len += copied;
+		max -= copied;
+		data->req->pfr_argp[argc].pfa_len = copied - 1;
+		argc++;
+	}
+	data->req->pfr_argarea[ARG_MAX - 1] = '\0';
+#ifdef PFEXDEBUG
+	printf("}\n");
+#endif
+	memcpy(&req->pfr_argc, &argc, sizeof(req->pfr_argc));
+
+	copied = 0;
+	int envc = 0;
+	max = ARG_MAX;
+	len = 0;
+	from = SCARG(data->uap, envp);
+#ifdef PFEXDEBUG
+	printf("env{");
+#endif
+	while (envc < 1024 && max > 0 && from != NULL && \
+	    from[envc] != NULL) {
+#ifdef PFEXDEBUG
+		printf("%s ", from[envc]);
+#endif
+		data->req->pfr_envp[envc].pfa_offset = len;
+		ret = copyinstr(from[envc], \
+		    data->req->pfr_envarea + len, max - len, &copied);
+		len += copied;
+		max -= copied;
+		data->req->pfr_envp[envc].pfa_len = copied - 1;
+		envc++;
+	}
+	data->req->pfr_envarea[ARG_MAX - 1] = '\0';
+	memcpy(&req->pfr_envc, &envc, sizeof(req->pfr_envc));
+#ifdef PFEXDEBUG
+	printf("}\n");
+#endif
+
+#ifdef PFEXDEBUG
+	printf("fill_mbuf -e\n");
+#endif
+}
+
+/*
+ * Show the response packet, useful to debug the response, switch on debug
+ */
+int
+check_priv(struct sock_data *data)
+{
+	int ret = data->resp->pfr_errno;
+	struct pfexec_resp *resp = data->resp;
+
+#ifdef PFEXDEBUG
+	printf("errno %d, flag %d, uid %d, gid %d, ngroups %d, groups {", \
+	    resp->pfr_errno, resp->pfr_flags, resp->pfr_uid, \
+	    resp->pfr_gid, resp->pfr_ngroups);
+	for (int i = 0; i < resp->pfr_ngroups; i++) {
+		printf("%d, ", resp->pfr_groups[i]);
+	}
+	printf("}\n");
+#endif
+
+#ifdef PFEXDEBUG
+	printf("chroot: %s\n, envc %d\nenv {", resp->pfr_chroot, \
+	    resp->pfr_envc);
+#endif
+
+	data->environment = malloc( \
+	    sizeof(char *) * 1024, M_TEMP, M_WAITOK | M_ZERO);
+
+	for (int i = 0; i < resp->pfr_envc; i++) {
+#ifdef PFEXDEBUG
+		printf("%s, ", resp->pfr_envarea + \
+		    (resp->pfr_envp[i].pfa_offset));
+#endif
+		data->environment[i] = resp->pfr_envarea + \
+		    (resp->pfr_envp[i].pfa_offset);
+	}
+#ifdef PFEXDEBUG
+	printf("}\n");
+#endif
+	return (ret);
+}
+
+/*
+ * Elivate this processes credentials
+ */
+void
+pfexec_escilate(void *arg)
+{
+#ifdef PFEXDEBUG
+	printf("pfexec_escilate -s\n");
+#endif
+	struct sock_data *data = (struct sock_data *)arg;
+
+	struct proc *p = data->p;
+	struct process *pr = p->p_p;
+	struct ucred *pruc, *newcred;
+	int error = 0;
+	int ngrp = (int)data->resp->pfr_ngroups;
+	gid_t *groups = (gid_t *)data->resp->pfr_groups;
+	uid_t old_uid = data->p->p_p->ps_ucred->cr_uid;
+
+	if (ngrp > NGROUPS_MAX || ngrp < 0) {
+		error = EINVAL;
+		goto error;
+	}
+	newcred = crget();
+	pruc = pr->ps_ucred;
+	crset(newcred, pruc);
+
+	newcred->cr_svuid = newcred->cr_ruid = newcred->cr_uid = \
+	    data->resp->pfr_uid;
+	newcred->cr_svgid = newcred->cr_rgid = newcred->cr_gid = \
+	    data->resp->pfr_gid;
+
+	newcred->cr_ngroups = ngrp;
+	memset(newcred->cr_groups, 0, ngrp * sizeof(gid_t));
+	memcpy(newcred->cr_groups, groups, ngrp * sizeof(gid_t));
+
+	pr->ps_ucred = newcred;
+	atomic_setbits_int(&p->p_p->ps_flags, PS_SUGID);
+
+	chgproccnt(old_uid, -1);
+	chgproccnt(data->resp->pfr_uid, 1);
+
+	crfree(pruc);
+	refreshcreds(p);
+error:
+	data->sys_pf_errno = error;
+
+#ifdef PFEXDEBUG
+	printf("pfexec_escilate -e\n");
+#endif
+}
+
+/*
+ * Free temporary buffers after escilation
+ */
+void
+pfexec_descilate(void *arg)
+{
+#ifdef PFEXDEBUG
+	printf("pfexec_descilate -s\n");
+#endif
+	struct sock_data *data = (struct sock_data *)arg;
+
+	free(data->environment, M_TEMP, sizeof(char *) * 1024);
+#ifdef PFEXDEBUG
+	printf("pfexec_descilate -e\n");
+#endif // pfexec_desk
+}
+
+/*
+ * Make a dynamic copy of path for NDINIT
+ */
+static char *
+pfex_path_copy(char *path)
+{
+	char *my_path = (char *)malloc( \
+	    sizeof(char) * PATH_MAX, M_DEVBUF, M_WAITOK | M_ZERO);
+
+	strlcpy(my_path, path, PATH_MAX);
+
+	return my_path;
+}
+
+/*
+ * Common routine for chroot and chdir.
+ */
+static int
+change_dir(struct nameidata *ndp, struct proc *p)
+{
+	struct vnode *vp;
+	int error;
+
+	if ((error = namei(ndp)) != 0)
+		return (error);
+	vp = ndp->ni_vp;
+	if (vp->v_type != VDIR)
+		error = ENOTDIR;
+	else
+		error = VOP_ACCESS(vp, VEXEC, p->p_ucred, p);
+	if (error)
+		vput(vp);
+	else
+		VOP_UNLOCK(vp);
+	return (error);
+}
+
+/*
+ * Change current working directory (``.'').
+ */
+int
+apply_chdir(struct proc *p, char *path)
+{
+#ifdef PFEXDEBUG
+	printf("pfexec_chdir -s\n");
+#endif
+	struct filedesc *fdp = p->p_fd;
+	struct vnode *old_cdir;
+	int error = 0;
+	struct nameidata nd;
+
+	NDINIT(&nd, LOOKUP, FOLLOW | LOCKLEAF, UIO_SYSSPACE,
+	    path, p);
+	nd.ni_pledge = PLEDGE_RPATH;
+	nd.ni_unveil = UNVEIL_READ;
+	if ((error = change_dir(&nd, p)) != 0)
+		goto error;
+	p->p_p->ps_uvpcwd = nd.ni_unveil_match;
+	old_cdir = fdp->fd_cdir;
+	fdp->fd_cdir = nd.ni_vp;
+	vrele(old_cdir);
+
+#ifdef PFEXDEBUG
+	printf("pfexec_chdir -s\n");
+#endif
+error:
+	return (error);
+}
+
+/*
+ * Chroot
+ */
+int
+apply_chroot(struct proc *p, char *path)
+{
+#ifdef PFEXDEBUG
+	printf("pfexec_chroot -s\n");
+#endif
+	struct filedesc *fdp = p->p_fd;
+	struct vnode *old_cdir, *old_rdir;
+	int error;
+	struct nameidata nd;
+
+	NDINIT(&nd, LOOKUP, FOLLOW | LOCKLEAF, UIO_SYSSPACE,
+	    path, p);
+	if ((error = change_dir(&nd, p)) != 0)
+		goto error;
+	if (fdp->fd_rdir != NULL) {
+		/*
+		 * A chroot() done inside a changed root environment does
+		 * an automatic chdir to avoid the out-of-tree experience.
+		 */
+		vref(nd.ni_vp);
+		old_rdir = fdp->fd_rdir;
+		old_cdir = fdp->fd_cdir;
+		fdp->fd_rdir = fdp->fd_cdir = nd.ni_vp;
+		vrele(old_rdir);
+		vrele(old_cdir);
+	} else
+		fdp->fd_rdir = nd.ni_vp;
+
+error:
+#ifdef PFEXDEBUG
+	printf("pfexec_chroot -e\n");
+#endif
+	return (error);
+}
+
+/*
+ * Handler before actual call to sys_exec
+ */
+void
+pfexec_exec(void *arg)
+{
+#ifdef PFEXDEBUG
+	printf("pfexec_exec -s\n");
+#endif
+	struct sock_data *data = (struct sock_data *)arg;
+	struct proc *p = data->p;
+	int ret = 0;
+
+	if (check_priv(data) != 0)
+		goto denied;
+
+	pfexec_escilate(arg);
+
+	register_t retval = 0;
+	struct sys_execve_args args = {0};
+
+	SCARG(&args, path) = SCARG(data->uap, path);
+	SCARG(&args, argp) = SCARG(data->uap, argp);
+	SCARG(&args, kenvp) = data->environment;
+	SCARG(&args, envp) = NULL;
+#ifdef PFEXDEBUG
+	printf("path: %s, argp: %p\n", \
+	    SCARG(&args, path), SCARG(&args, argp));
+#endif
+	ret = sys_execve(p, &args, &retval);
+	if (ret) {
+#ifdef PFEXDEBUG
+		printf("%s: sys_execve error %d\n",
+		    __func__, ret);
+#endif
+	}
+
+	if (data->resp->pfr_flags & PFRESP_CHROOT) {
+		ret = apply_chroot(data->p, \
+		    pfex_path_copy(data->resp->pfr_chroot));
+		if (ret) {
+#ifdef PFEXDEBUG
+			printf("%s: apply_chroot %d\n",
+			    __func__, ret);
+#endif
+		}
+//		ret = apply_chroot(data->p, \
+//		    pfex_path_copy(data->resp->pfr_chroot));
+		if (ret) {
+#ifdef PFEXDEBUG
+			printf("%s: apply_chrdir %d\n",
+			    __func__, ret);
+#endif
+		}
+	}
+	pfexec_descilate(arg);
+
+denied:
+#ifdef PFEXDEBUG
+	printf("pfexec_exec -e\n");
+#endif // pfexec_exec
+	ret++;
+}
+
+/*
+ * Validate the integrity of the response packet
+ */
+static int
+process_response(struct pfexec_resp *resp)
+{
+	uint i;
+
+	/* Check for correctly formed respuest. */
+	if (resp->pfr_ngroups >= NGROUPS_MAX)
+		return (EINVAL);
+	if (resp->pfr_envc >= 1024)
+		return (EINVAL);
+
+	/*
+	 * Validate all the argument and env var references before we try to
+	 * use any of them.
+	 */
+	for (i = 0; i < resp->pfr_envc; ++i) {
+		const struct pfexec_arg *a = &resp->pfr_envp[i];
+		if (a->pfa_offset >= ARG_MAX)
+			return (EINVAL);
+		if (a->pfa_len >= ARG_MAX)
+			return (EINVAL);
+		if (a->pfa_offset + a->pfa_len >= ARG_MAX)
+			return (EINVAL);
+	}
+	return (0);
+}
+
+/*
+ * Check the arguments
+ */
+int
+validate_args(void *v)
+{
+	struct sys_pfexecve_args /* {
+		syscallarg(const struct pfexecve_opts *) opts;
+		syscallarg(const char *) path;
+		syscallarg(char *const *) argp;
+		syscallarg(char *const *) envp;
+	} */ *uap = v;
+	if (SCARG(uap, opts) == NULL || SCARG(uap, path) == NULL || \
+	    SCARG(uap, argp) == NULL || SCARG(uap, envp) == NULL)
+		return EINVAL;
+	return (0);
+}
+
+/*
+ * Actual pfexec syscall handler
+ */
+int
+sys_pfexecve(struct proc *p, void *v, register_t *retval)
+{
+#ifdef PFEXDEBUG
+	printf("sys_pfexecve -s\n");
+#endif
+	struct sock_data data = {0};
+	int ret = 0;
+
+	ret = validate_args(v);
+	if (ret)
+		goto worse;
+
+	data.p = p;
+
+	data.tq = taskq_create("pfexec_tq", 1, IPL_SOFTNET, 0);
+	if (data.tq == NULL) {
+		data.sys_pf_errno = ENOMEM;
+#ifdef PFEXDEBUG
+		printf("%s: taskq_create error %d\n",
+		    __func__, data.sys_pf_errno);
+#endif
+		goto worse;
+	}
+
+	data.uap = v;
+
+	craft_mbuf(&data);
+	if (data.sys_pf_errno != 0) {
+		goto bad;
+	}
+
+	fill_mbuf(&data);
+
+	task_set(&data.start, start_sock, &data);
+	task_set(&data.end, end_sock, &data);
+
+	task_add(data.tq, &data.start);
+
+	/* Wait for connection establish and deamon to respond */
+	ret = tsleep_nsec(&data.ident, IPL_SOFTNET | PCATCH, \
+	    "SEND_NULL", INFSLP);
+	if (ret) {
+		data.sys_pf_errno = ret;
+#ifdef PFEXDEBUG
+		printf("%s: tlseep error %d\n",
+		    __func__, ret);
+#endif
+		goto bad;
+	}
+
+	/* No errors then check the resp packet */
+	if (ret == 0)
+		ret = process_response(data.resp);
+	ret = data.sys_pf_errno ? data.sys_pf_errno : data.resp->pfr_errno;
+	if (ret != 0)
+		goto bad;
+
+	/* Check the resp then previlage esclate */
+	pfexec_exec(&data);
+bad:
+	free(data.resp, M_TEMP, sizeof(struct pfexec_resp));
+
+	taskq_destroy(data.tq);
+#ifdef PFEXDEBUG
+	printf("in debug mode\n");
+#endif
+worse:
+#ifdef PFEXDEBUG
+	printf("sys_pfexecve %d-e\n", data.sys_pf_errno);
+#endif
+	return (ret);
+}
Index: sys/kern/syscalls.c
===================================================================
RCS file: /cvs/src/sys/kern/syscalls.c,v
retrieving revision 1.219
diff -u -p -u -p -r1.219 syscalls.c
--- sys/kern/syscalls.c	18 Mar 2021 08:44:59 -0000	1.219
+++ sys/kern/syscalls.c	23 Oct 2021 11:31:49 -0000
@@ -1,4 +1,4 @@
-/*	$OpenBSD: syscalls.c,v 1.219 2021/03/18 08:44:59 mvs Exp $	*/
+/*	$OpenBSD$	*/
 
 /*
  * System call names.
@@ -393,4 +393,5 @@ char *syscallnames[] = {
 	"#328 (obsolete __tfork51)",		/* 328 = obsolete __tfork51 */
 	"__set_tcb",			/* 329 = __set_tcb */
 	"__get_tcb",			/* 330 = __get_tcb */
+	"pfexecve",			/* 331 = pfexecve */
 };
Index: sys/kern/syscalls.master
===================================================================
RCS file: /cvs/src/sys/kern/syscalls.master,v
retrieving revision 1.209
diff -u -p -u -p -r1.209 syscalls.master
--- sys/kern/syscalls.master	18 Mar 2021 08:43:38 -0000	1.209
+++ sys/kern/syscalls.master	23 Oct 2021 11:31:49 -0000
@@ -566,3 +566,6 @@
 328	OBSOL		__tfork51
 329	STD NOLOCK	{ void sys___set_tcb(void *tcb); }
 330	STD NOLOCK	{ void *sys___get_tcb(void); }
+331	STD		{ int sys_pfexecve(const struct pfexecve_opts *opts, \
+			    const char *path, char * const *argp, \
+			    char * const *envp); }
Index: sys/kern/tty.c
===================================================================
RCS file: /cvs/src/sys/kern/tty.c,v
retrieving revision 1.167
diff -u -p -u -p -r1.167 tty.c
--- sys/kern/tty.c	8 Feb 2021 10:51:02 -0000	1.167
+++ sys/kern/tty.c	23 Oct 2021 11:31:49 -0000
@@ -995,6 +995,16 @@ ttioctl(struct tty *tp, u_long cmd, cadd
 		pr->ps_session->s_ttyp = tp;
 		atomic_setbits_int(&pr->ps_flags, PS_CONTROLT);
 		break;
+	case TIOCJTTY:			/* join a tty */
+		if (suser(p))
+			return (EPERM);
+		if (pr->ps_session)
+			SESSRELE(pr->ps_session);
+		SESSHOLD(tp->t_session);
+		pr->ps_session = tp->t_session;
+		enterthispgrp(pr, tp->t_pgrp);
+		atomic_setbits_int(&pr->ps_flags, PS_CONTROLT);
+		break;
 	case FIOSETOWN: {		/* set pgrp of tty */
 		struct pgrp *pgrp;
 		struct process *pr1;
Index: sys/sys/syscall.h
===================================================================
RCS file: /cvs/src/sys/sys/syscall.h,v
retrieving revision 1.219
diff -u -p -u -p -r1.219 syscall.h
--- sys/sys/syscall.h	18 Mar 2021 08:44:59 -0000	1.219
+++ sys/sys/syscall.h	23 Oct 2021 11:31:49 -0000
@@ -1,4 +1,4 @@
-/*	$OpenBSD: syscall.h,v 1.219 2021/03/18 08:44:59 mvs Exp $	*/
+/*	$OpenBSD$	*/
 
 /*
  * System call numbers.
@@ -705,4 +705,7 @@
 /* syscall: "__get_tcb" ret: "void *" args: */
 #define	SYS___get_tcb	330
 
-#define	SYS_MAXSYSCALL	331
+/* syscall: "pfexecve" ret: "int" args: "const struct pfexecve_opts *" "const char *" "char *const *" "char *const *" */
+#define	SYS_pfexecve	331
+
+#define	SYS_MAXSYSCALL	332
Index: sys/sys/syscallargs.h
===================================================================
RCS file: /cvs/src/sys/sys/syscallargs.h,v
retrieving revision 1.222
diff -u -p -u -p -r1.222 syscallargs.h
--- sys/sys/syscallargs.h	18 Mar 2021 08:44:59 -0000	1.222
+++ sys/sys/syscallargs.h	23 Oct 2021 11:31:49 -0000
@@ -1,4 +1,4 @@
-/*	$OpenBSD: syscallargs.h,v 1.222 2021/03/18 08:44:59 mvs Exp $	*/
+/*	$OpenBSD$	*/
 
 /*
  * System call argument lists.
@@ -279,6 +279,7 @@ struct sys_execve_args {
 	syscallarg(const char *) path;
 	syscallarg(char *const *) argp;
 	syscallarg(char *const *) envp;
+	syscallarg(char **) kenvp;
 };
 
 struct sys_umask_args {
@@ -1109,6 +1110,13 @@ struct sys___set_tcb_args {
 	syscallarg(void *) tcb;
 };
 
+struct sys_pfexecve_args {
+	syscallarg(const struct pfexecve_opts *) opts;
+	syscallarg(const char *) path;
+	syscallarg(char *const *) argp;
+	syscallarg(char *const *) envp;
+};
+
 /*
  * System call prototypes.
  */
@@ -1360,3 +1368,4 @@ int	sys_symlinkat(struct proc *, void *,
 int	sys_unlinkat(struct proc *, void *, register_t *);
 int	sys___set_tcb(struct proc *, void *, register_t *);
 int	sys___get_tcb(struct proc *, void *, register_t *);
+int	sys_pfexecve(struct proc *, void *, register_t *);
Index: sys/sys/ttycom.h
===================================================================
RCS file: /cvs/src/sys/sys/ttycom.h,v
retrieving revision 1.17
diff -u -p -u -p -r1.17 ttycom.h
--- sys/sys/ttycom.h	16 Jun 2018 13:55:03 -0000	1.17
+++ sys/sys/ttycom.h	23 Oct 2021 11:31:49 -0000
@@ -122,6 +122,7 @@ struct tstamps {
 #define	TIOCGSID	_IOR('t', 99, int)	/* get sid of tty */
 #define	TIOCCONS	_IOW('t', 98, int)	/* become virtual console */
 #define	TIOCSCTTY	 _IO('t', 97)		/* become controlling tty */
+#define	TIOCJTTY	 _IO('t', 124)		/* join another tty (root) */
 #define	TIOCEXT		_IOW('t', 96, int)	/* pty: external processing */
 #define	TIOCSIG		_IOW('t', 95, int)	/* pty: generate signal */
 #define	TIOCDRAIN	 _IO('t', 94)		/* wait till output drained */
Index: share/man/man4/tty.4
===================================================================
RCS file: /cvs/src/share/man/man4/tty.4,v
retrieving revision 1.53
diff -u -p -u -p -r1.53 tty.4
--- share/man/man4/tty.4	7 Sep 2019 10:28:27 -0000	1.53
+++ share/man/man4/tty.4	23 Oct 2021 11:35:33 -0000
@@ -330,6 +330,10 @@ Start output on the terminal (like typin
 .It Dv TIOCSCTTY Fa void
 Make the terminal the controlling terminal for the process (the process
 must not currently have a controlling terminal).
+.It Dv TIOCJTTY Fa void
+"Joins" the current process to the session and process group which is currently
+in the foreground of the terminal, making it the new controlling terminal for
+the process. This command can only be used by root.
 .It Dv TIOCDRAIN Fa void
 Wait until all output is drained.
 .It Dv TIOCEXCL Fa void
